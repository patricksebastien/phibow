
ebarn.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800200  0000027e  000002f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000027e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         0000105c  00000000  00000000  0000030c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000e16  00000000  00000000  00001368  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
   8:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
   c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  10:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  14:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  18:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  1c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  20:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  24:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  28:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  2c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  30:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  34:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  38:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  3c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  40:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  44:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  48:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  4c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  50:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  54:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  58:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  5c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  60:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  64:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  68:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  6c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  70:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  74:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  78:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  7c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  80:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  84:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  88:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  8c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  90:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  94:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  98:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  9c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  a0:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  a4:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  a8:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  ac:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  b0:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  b4:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  b8:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  bc:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  c0:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  c4:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  c8:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  cc:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  d0:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  d4:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  d8:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  dc:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  e0:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61

000000f0 <__do_copy_data>:
  f0:	12 e0       	ldi	r17, 0x02	; 2
  f2:	a0 e0       	ldi	r26, 0x00	; 0
  f4:	b2 e0       	ldi	r27, 0x02	; 2
  f6:	ee e7       	ldi	r30, 0x7E	; 126
  f8:	f2 e0       	ldi	r31, 0x02	; 2
  fa:	02 c0       	rjmp	.+4      	; 0x100 <__do_copy_data+0x10>
  fc:	05 90       	lpm	r0, Z+
  fe:	0d 92       	st	X+, r0
 100:	a8 31       	cpi	r26, 0x18	; 24
 102:	b1 07       	cpc	r27, r17
 104:	d9 f7       	brne	.-10     	; 0xfc <__do_copy_data+0xc>
 106:	0e 94 8f 00 	call	0x11e	; 0x11e <main>
 10a:	0c 94 3d 01 	jmp	0x27a	; 0x27a <_exit>

0000010e <__bad_interrupt>:
 10e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000112 <initialize>:

/** Initializes all of the hardware. */
void initialize(void){


    DDRD = 0xFF;
 112:	8f ef       	ldi	r24, 0xFF	; 255
 114:	8a b9       	out	0x0a, r24	; 10
    touch_init();
 116:	0e 94 c6 00 	call	0x18c	; 0x18c <touch_init>

    sei();
 11a:	78 94       	sei
}
 11c:	08 95       	ret

0000011e <main>:
};

/**********************************************************
 * Main function
 **********************************************************/
int main(void){
 11e:	cf 93       	push	r28
 120:	df 93       	push	r29

    //variables
    uint16_t i;
    uint16_t sample[3];

	initialize();
 122:	0e 94 89 00 	call	0x112	; 0x112 <initialize>
    while (1)
    {
        i++;
        if (i>10000){
			
            sample[0] = touch_measure(&btn1);
 126:	80 e0       	ldi	r24, 0x00	; 0
 128:	92 e0       	ldi	r25, 0x02	; 2
 12a:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <touch_measure>
 12e:	ec 01       	movw	r28, r24
            sample[1] = touch_measure(&btn2);
 130:	88 e0       	ldi	r24, 0x08	; 8
 132:	92 e0       	ldi	r25, 0x02	; 2
 134:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <touch_measure>
            sample[2] = touch_measure(&btn3);
 138:	80 e1       	ldi	r24, 0x10	; 16
 13a:	92 e0       	ldi	r25, 0x02	; 2
 13c:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <touch_measure>
            
            if(sample[0] > 790) {
 140:	83 e0       	ldi	r24, 0x03	; 3
 142:	c7 31       	cpi	r28, 0x17	; 23
 144:	d8 07       	cpc	r29, r24
 146:	10 f0       	brcs	.+4      	; 0x14c <main+0x2e>
				PORTD &= ~(1 << PIND7);
 148:	5f 98       	cbi	0x0b, 7	; 11
 14a:	ed cf       	rjmp	.-38     	; 0x126 <main+0x8>
			} else {
				PORTD |= (1 << PIND7);
 14c:	5f 9a       	sbi	0x0b, 7	; 11
 14e:	eb cf       	rjmp	.-42     	; 0x126 <main+0x8>

00000150 <adc_channel>:

#include "touch.h"

/** For setting the ADC channel */
static inline void adc_channel(uint8_t channel){
    ADMUX &= ~(0b11111);
 150:	ec e7       	ldi	r30, 0x7C	; 124
 152:	f0 e0       	ldi	r31, 0x00	; 0
 154:	90 81       	ld	r25, Z
 156:	90 7e       	andi	r25, 0xE0	; 224
 158:	90 83       	st	Z, r25
    ADMUX |=   0b11111 & channel;
 15a:	90 81       	ld	r25, Z
 15c:	8f 71       	andi	r24, 0x1F	; 31
 15e:	89 2b       	or	r24, r25
 160:	80 83       	st	Z, r24
}
 162:	08 95       	ret

00000164 <adc_get>:

/** For doing an ADC measurement */
static inline uint16_t adc_get(void){
    ADCSRA |= (1<<ADSC);
 164:	80 91 7a 00 	lds	r24, 0x007A
 168:	80 64       	ori	r24, 0x40	; 64
 16a:	80 93 7a 00 	sts	0x007A, r24
    while(!(ADCSRA & (1<<ADIF)));
 16e:	80 91 7a 00 	lds	r24, 0x007A
 172:	84 ff       	sbrs	r24, 4
 174:	fc cf       	rjmp	.-8      	; 0x16e <adc_get+0xa>
    ADCSRA |= (1<<ADIF);
 176:	80 91 7a 00 	lds	r24, 0x007A
 17a:	80 61       	ori	r24, 0x10	; 16
 17c:	80 93 7a 00 	sts	0x007A, r24
    return ADC;
 180:	20 91 78 00 	lds	r18, 0x0078
 184:	30 91 79 00 	lds	r19, 0x0079
}
 188:	c9 01       	movw	r24, r18
 18a:	08 95       	ret

0000018c <touch_init>:

void touch_init(void){
    ADMUX  |= (1<<REFS0); //reference AVCC (5v)
 18c:	ec e7       	ldi	r30, 0x7C	; 124
 18e:	f0 e0       	ldi	r31, 0x00	; 0
 190:	80 81       	ld	r24, Z
 192:	80 64       	ori	r24, 0x40	; 64
 194:	80 83       	st	Z, r24

    ADCSRA |= (1<<ADPS2)|(1<<ADPS1); //clockiv 64
 196:	ea e7       	ldi	r30, 0x7A	; 122
 198:	f0 e0       	ldi	r31, 0x00	; 0
 19a:	80 81       	ld	r24, Z
 19c:	86 60       	ori	r24, 0x06	; 6
 19e:	80 83       	st	Z, r24
    //final clock 8MHz/64 = 125kHz
    
    ADCSRA |= (1<<ADEN); //enable ADC
 1a0:	80 81       	ld	r24, Z
 1a2:	80 68       	ori	r24, 0x80	; 128
 1a4:	80 83       	st	Z, r24
}
 1a6:	08 95       	ret

000001a8 <touch_measure>:


uint16_t touch_measure(touch_channel_t *channel){
 1a8:	ff 92       	push	r15
 1aa:	0f 93       	push	r16
 1ac:	1f 93       	push	r17
 1ae:	cf 93       	push	r28
 1b0:	df 93       	push	r29
 1b2:	ec 01       	movw	r28, r24
 1b4:	94 e0       	ldi	r25, 0x04	; 4
 1b6:	f9 2e       	mov	r15, r25
    uint8_t i;
    uint16_t retval;

    retval = 0;
 1b8:	00 e0       	ldi	r16, 0x00	; 0
 1ba:	10 e0       	ldi	r17, 0x00	; 0

    //Do four measurements and average, just to smooth things out
    for (i=0 ; i<4 ; i++){
        *(channel->port) |= channel->portmask;    // set pullup on
 1bc:	e8 81       	ld	r30, Y
 1be:	f9 81       	ldd	r31, Y+1	; 0x01
 1c0:	80 81       	ld	r24, Z
 1c2:	9a 81       	ldd	r25, Y+2	; 0x02
 1c4:	89 2b       	or	r24, r25
 1c6:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1c8:	8f e9       	ldi	r24, 0x9F	; 159
 1ca:	9f e0       	ldi	r25, 0x0F	; 15
 1cc:	01 97       	sbiw	r24, 0x01	; 1
 1ce:	f1 f7       	brne	.-4      	; 0x1cc <touch_measure+0x24>
 1d0:	00 c0       	rjmp	.+0      	; 0x1d2 <touch_measure+0x2a>
 1d2:	00 00       	nop
        _delay_ms(1);                             // wait (could probably be shorter)
        *(channel->port) &= ~(channel->portmask); // set pullup off
 1d4:	e8 81       	ld	r30, Y
 1d6:	f9 81       	ldd	r31, Y+1	; 0x01
 1d8:	90 81       	ld	r25, Z
 1da:	8a 81       	ldd	r24, Y+2	; 0x02
 1dc:	80 95       	com	r24
 1de:	89 23       	and	r24, r25
 1e0:	80 83       	st	Z, r24

        adc_channel(0b11111); //set ADC mux to ground;
 1e2:	8f e1       	ldi	r24, 0x1F	; 31
 1e4:	0e 94 a8 00 	call	0x150	; 0x150 <adc_channel>
        adc_get();            //do a measurement (to discharge the sampling cap)
 1e8:	0e 94 b2 00 	call	0x164	; 0x164 <adc_get>

        adc_channel(channel->mux); //set mux to right channel
 1ec:	8b 81       	ldd	r24, Y+3	; 0x03
 1ee:	0e 94 a8 00 	call	0x150	; 0x150 <adc_channel>
        retval +=  adc_get();
 1f2:	0e 94 b2 00 	call	0x164	; 0x164 <adc_get>
 1f6:	08 0f       	add	r16, r24
 1f8:	19 1f       	adc	r17, r25
 1fa:	fa 94       	dec	r15
    uint16_t retval;

    retval = 0;

    //Do four measurements and average, just to smooth things out
    for (i=0 ; i<4 ; i++){
 1fc:	f9 f6       	brne	.-66     	; 0x1bc <touch_measure+0x14>
        adc_get();            //do a measurement (to discharge the sampling cap)

        adc_channel(channel->mux); //set mux to right channel
        retval +=  adc_get();
    }
    retval /= 4;
 1fe:	16 95       	lsr	r17
 200:	07 95       	ror	r16
 202:	16 95       	lsr	r17
 204:	07 95       	ror	r16

    if (retval < channel->min)
 206:	8c 81       	ldd	r24, Y+4	; 0x04
 208:	9d 81       	ldd	r25, Y+5	; 0x05
 20a:	08 17       	cp	r16, r24
 20c:	19 07       	cpc	r17, r25
 20e:	a8 f0       	brcs	.+42     	; 0x23a <touch_measure+0x92>
        return 0;

    if (retval > channel->max)
 210:	6e 81       	ldd	r22, Y+6	; 0x06
 212:	7f 81       	ldd	r23, Y+7	; 0x07
 214:	60 17       	cp	r22, r16
 216:	71 07       	cpc	r23, r17
 218:	98 f0       	brcs	.+38     	; 0x240 <touch_measure+0x98>

    if (retval > channel->max)
        channel->max = retval;
        */

    retval = (retval - channel->min) * (0x7FFF/(channel->max - channel->min));
 21a:	08 1b       	sub	r16, r24
 21c:	19 0b       	sbc	r17, r25
 21e:	68 1b       	sub	r22, r24
 220:	79 0b       	sbc	r23, r25
 222:	8f ef       	ldi	r24, 0xFF	; 255
 224:	9f e7       	ldi	r25, 0x7F	; 127
 226:	0e 94 29 01 	call	0x252	; 0x252 <__udivmodhi4>
 22a:	06 9f       	mul	r16, r22
 22c:	90 01       	movw	r18, r0
 22e:	07 9f       	mul	r16, r23
 230:	30 0d       	add	r19, r0
 232:	16 9f       	mul	r17, r22
 234:	30 0d       	add	r19, r0
 236:	11 24       	eor	r1, r1

    return retval;
 238:	05 c0       	rjmp	.+10     	; 0x244 <touch_measure+0x9c>
        retval +=  adc_get();
    }
    retval /= 4;

    if (retval < channel->min)
        return 0;
 23a:	20 e0       	ldi	r18, 0x00	; 0
 23c:	30 e0       	ldi	r19, 0x00	; 0
 23e:	02 c0       	rjmp	.+4      	; 0x244 <touch_measure+0x9c>

    if (retval > channel->max)
        return 0x7FFF;
 240:	2f ef       	ldi	r18, 0xFF	; 255
 242:	3f e7       	ldi	r19, 0x7F	; 127
        */

    retval = (retval - channel->min) * (0x7FFF/(channel->max - channel->min));

    return retval;
}
 244:	c9 01       	movw	r24, r18
 246:	df 91       	pop	r29
 248:	cf 91       	pop	r28
 24a:	1f 91       	pop	r17
 24c:	0f 91       	pop	r16
 24e:	ff 90       	pop	r15
 250:	08 95       	ret

00000252 <__udivmodhi4>:
 252:	aa 1b       	sub	r26, r26
 254:	bb 1b       	sub	r27, r27
 256:	51 e1       	ldi	r21, 0x11	; 17
 258:	07 c0       	rjmp	.+14     	; 0x268 <__udivmodhi4_ep>

0000025a <__udivmodhi4_loop>:
 25a:	aa 1f       	adc	r26, r26
 25c:	bb 1f       	adc	r27, r27
 25e:	a6 17       	cp	r26, r22
 260:	b7 07       	cpc	r27, r23
 262:	10 f0       	brcs	.+4      	; 0x268 <__udivmodhi4_ep>
 264:	a6 1b       	sub	r26, r22
 266:	b7 0b       	sbc	r27, r23

00000268 <__udivmodhi4_ep>:
 268:	88 1f       	adc	r24, r24
 26a:	99 1f       	adc	r25, r25
 26c:	5a 95       	dec	r21
 26e:	a9 f7       	brne	.-22     	; 0x25a <__udivmodhi4_loop>
 270:	80 95       	com	r24
 272:	90 95       	com	r25
 274:	bc 01       	movw	r22, r24
 276:	cd 01       	movw	r24, r26
 278:	08 95       	ret

0000027a <_exit>:
 27a:	f8 94       	cli

0000027c <__stop_program>:
 27c:	ff cf       	rjmp	.-2      	; 0x27c <__stop_program>
