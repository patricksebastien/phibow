Archive member included because of file (symbol)

/usr/lib/gcc/avr/4.5.3/avr5/libgcc.a(_udivmodhi4.o)
                              touch.o (__udivmodhi4)
/usr/lib/gcc/avr/4.5.3/avr5/libgcc.a(_exit.o)
                              /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr5/crtm640.o (exit)
/usr/lib/gcc/avr/4.5.3/avr5/libgcc.a(_copy_data.o)
                              main.o (__do_copy_data)

Memory Configuration

Name             Origin             Length             Attributes
text             0x0000000000000000 0x0000000000020000 xr
data             0x0000000000800060 0x000000000000ffa0 rw !x
eeprom           0x0000000000810000 0x0000000000010000 rw !x
fuse             0x0000000000820000 0x0000000000000400 rw !x
lock             0x0000000000830000 0x0000000000000400 rw !x
signature        0x0000000000840000 0x0000000000000400 rw !x
*default*        0x0000000000000000 0xffffffffffffffff

Linker script and memory map

Address of section .data set to 0x800200
LOAD /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr5/crtm640.o
LOAD main.o
LOAD touch.o
LOAD /usr/lib/gcc/avr/4.5.3/avr5/libgcc.a
LOAD /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr5/libc.a
LOAD /usr/lib/gcc/avr/4.5.3/avr5/libgcc.a

.hash
 *(.hash)

.dynsym
 *(.dynsym)

.dynstr
 *(.dynstr)

.gnu.version
 *(.gnu.version)

.gnu.version_d
 *(.gnu.version_d)

.gnu.version_r
 *(.gnu.version_r)

.rel.init
 *(.rel.init)

.rela.init
 *(.rela.init)

.rel.text
 *(.rel.text)
 *(.rel.text.*)
 *(.rel.gnu.linkonce.t*)

.rela.text
 *(.rela.text)
 *(.rela.text.*)
 *(.rela.gnu.linkonce.t*)

.rel.fini
 *(.rel.fini)

.rela.fini
 *(.rela.fini)

.rel.rodata
 *(.rel.rodata)
 *(.rel.rodata.*)
 *(.rel.gnu.linkonce.r*)

.rela.rodata
 *(.rela.rodata)
 *(.rela.rodata.*)
 *(.rela.gnu.linkonce.r*)

.rel.data
 *(.rel.data)
 *(.rel.data.*)
 *(.rel.gnu.linkonce.d*)

.rela.data
 *(.rela.data)
 *(.rela.data.*)
 *(.rela.gnu.linkonce.d*)

.rel.ctors
 *(.rel.ctors)

.rela.ctors
 *(.rela.ctors)

.rel.dtors
 *(.rel.dtors)

.rela.dtors
 *(.rela.dtors)

.rel.got
 *(.rel.got)

.rela.got
 *(.rela.got)

.rel.bss
 *(.rel.bss)

.rela.bss
 *(.rela.bss)

.rel.plt
 *(.rel.plt)

.rela.plt
 *(.rela.plt)

.text           0x0000000000000000      0x27e
 *(.vectors)
 .vectors       0x0000000000000000       0xe4 /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr5/crtm640.o
                0x0000000000000000                __vectors
                0x0000000000000000                __vector_default
 *(.vectors)
 *(.progmem.gcc*)
 *(.progmem*)
                0x00000000000000e4                . = ALIGN (0x2)
                0x00000000000000e4                __trampolines_start = .
 *(.trampolines)
 .trampolines   0x00000000000000e4        0x0 linker stubs
 *(.trampolines*)
                0x00000000000000e4                __trampolines_end = .
 *(.jumptables)
 *(.jumptables*)
 *(.lowtext)
 *(.lowtext*)
                0x00000000000000e4                __ctors_start = .
 *(.ctors)
                0x00000000000000e4                __ctors_end = .
                0x00000000000000e4                __dtors_start = .
 *(.dtors)
                0x00000000000000e4                __dtors_end = .
 SORT(*)(.ctors)
 SORT(*)(.dtors)
 *(.init0)
 .init0         0x00000000000000e4        0x0 /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr5/crtm640.o
                0x00000000000000e4                __init
 *(.init0)
 *(.init1)
 *(.init1)
 *(.init2)
 .init2         0x00000000000000e4        0xc /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr5/crtm640.o
 *(.init2)
 *(.init3)
 *(.init3)
 *(.init4)
 .init4         0x00000000000000f0       0x16 /usr/lib/gcc/avr/4.5.3/avr5/libgcc.a(_copy_data.o)
                0x00000000000000f0                __do_copy_data
 *(.init4)
 *(.init5)
 *(.init5)
 *(.init6)
 *(.init6)
 *(.init7)
 *(.init7)
 *(.init8)
 *(.init8)
 *(.init9)
 .init9         0x0000000000000106        0x8 /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr5/crtm640.o
 *(.init9)
 *(.text)
 .text          0x000000000000010e        0x4 /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr5/crtm640.o
                0x000000000000010e                __vector_38
                0x000000000000010e                __vector_22
                0x000000000000010e                __vector_28
                0x000000000000010e                __vector_1
                0x000000000000010e                __vector_32
                0x000000000000010e                __vector_34
                0x000000000000010e                __vector_24
                0x000000000000010e                __vector_12
                0x000000000000010e                __vector_55
                0x000000000000010e                __vector_46
                0x000000000000010e                __bad_interrupt
                0x000000000000010e                __vector_6
                0x000000000000010e                __vector_31
                0x000000000000010e                __vector_35
                0x000000000000010e                __vector_39
                0x000000000000010e                __vector_3
                0x000000000000010e                __vector_23
                0x000000000000010e                __vector_30
                0x000000000000010e                __vector_45
                0x000000000000010e                __vector_25
                0x000000000000010e                __vector_11
                0x000000000000010e                __vector_54
                0x000000000000010e                __vector_13
                0x000000000000010e                __vector_17
                0x000000000000010e                __vector_19
                0x000000000000010e                __vector_56
                0x000000000000010e                __vector_7
                0x000000000000010e                __vector_49
                0x000000000000010e                __vector_41
                0x000000000000010e                __vector_43
                0x000000000000010e                __vector_27
                0x000000000000010e                __vector_5
                0x000000000000010e                __vector_33
                0x000000000000010e                __vector_47
                0x000000000000010e                __vector_52
                0x000000000000010e                __vector_37
                0x000000000000010e                __vector_4
                0x000000000000010e                __vector_44
                0x000000000000010e                __vector_51
                0x000000000000010e                __vector_9
                0x000000000000010e                __vector_2
                0x000000000000010e                __vector_21
                0x000000000000010e                __vector_15
                0x000000000000010e                __vector_36
                0x000000000000010e                __vector_29
                0x000000000000010e                __vector_40
                0x000000000000010e                __vector_8
                0x000000000000010e                __vector_26
                0x000000000000010e                __vector_48
                0x000000000000010e                __vector_14
                0x000000000000010e                __vector_53
                0x000000000000010e                __vector_10
                0x000000000000010e                __vector_50
                0x000000000000010e                __vector_16
                0x000000000000010e                __vector_18
                0x000000000000010e                __vector_20
                0x000000000000010e                __vector_42
 .text          0x0000000000000112       0x3e main.o
                0x0000000000000112                initialize
                0x000000000000011e                main
 .text          0x0000000000000150      0x102 touch.o
                0x000000000000018c                touch_init
                0x00000000000001a8                touch_measure
 .text          0x0000000000000252        0x0 /usr/lib/gcc/avr/4.5.3/avr5/libgcc.a(_udivmodhi4.o)
 .text          0x0000000000000252        0x0 /usr/lib/gcc/avr/4.5.3/avr5/libgcc.a(_exit.o)
 .text          0x0000000000000252        0x0 /usr/lib/gcc/avr/4.5.3/avr5/libgcc.a(_copy_data.o)
                0x0000000000000252                . = ALIGN (0x2)
 *(.text.*)
 .text.libgcc   0x0000000000000252       0x28 /usr/lib/gcc/avr/4.5.3/avr5/libgcc.a(_udivmodhi4.o)
                0x0000000000000252                __udivmodhi4
 .text.libgcc   0x000000000000027a        0x0 /usr/lib/gcc/avr/4.5.3/avr5/libgcc.a(_exit.o)
 .text.libgcc   0x000000000000027a        0x0 /usr/lib/gcc/avr/4.5.3/avr5/libgcc.a(_copy_data.o)
                0x000000000000027a                . = ALIGN (0x2)
 *(.fini9)
 .fini9         0x000000000000027a        0x0 /usr/lib/gcc/avr/4.5.3/avr5/libgcc.a(_exit.o)
                0x000000000000027a                exit
                0x000000000000027a                _exit
 *(.fini9)
 *(.fini8)
 *(.fini8)
 *(.fini7)
 *(.fini7)
 *(.fini6)
 *(.fini6)
 *(.fini5)
 *(.fini5)
 *(.fini4)
 *(.fini4)
 *(.fini3)
 *(.fini3)
 *(.fini2)
 *(.fini2)
 *(.fini1)
 *(.fini1)
 *(.fini0)
 .fini0         0x000000000000027a        0x4 /usr/lib/gcc/avr/4.5.3/avr5/libgcc.a(_exit.o)
 *(.fini0)
                0x000000000000027e                _etext = .

.data           0x0000000000800200       0x18 load address 0x000000000000027e
                0x0000000000800200                PROVIDE (__data_start, .)
 *(.data)
 .data          0x0000000000800200        0x0 /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr5/crtm640.o
 .data          0x0000000000800200       0x18 main.o
 .data          0x0000000000800218        0x0 touch.o
 .data          0x0000000000800218        0x0 /usr/lib/gcc/avr/4.5.3/avr5/libgcc.a(_udivmodhi4.o)
 .data          0x0000000000800218        0x0 /usr/lib/gcc/avr/4.5.3/avr5/libgcc.a(_exit.o)
 .data          0x0000000000800218        0x0 /usr/lib/gcc/avr/4.5.3/avr5/libgcc.a(_copy_data.o)
 *(.data*)
 *(.rodata)
 *(.rodata*)
 *(.gnu.linkonce.d*)
                0x0000000000800218                . = ALIGN (0x2)
                0x0000000000800218                _edata = .
                0x0000000000800218                PROVIDE (__data_end, .)

.bss            0x0000000000800218        0x0
                0x0000000000800218                PROVIDE (__bss_start, .)
 *(.bss)
 .bss           0x0000000000800218        0x0 /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr5/crtm640.o
 .bss           0x0000000000800218        0x0 main.o
 .bss           0x0000000000800218        0x0 touch.o
 .bss           0x0000000000800218        0x0 /usr/lib/gcc/avr/4.5.3/avr5/libgcc.a(_udivmodhi4.o)
 .bss           0x0000000000800218        0x0 /usr/lib/gcc/avr/4.5.3/avr5/libgcc.a(_exit.o)
 .bss           0x0000000000800218        0x0 /usr/lib/gcc/avr/4.5.3/avr5/libgcc.a(_copy_data.o)
 *(.bss*)
 *(COMMON)
                0x0000000000800218                PROVIDE (__bss_end, .)
                0x000000000000027e                __data_load_start = LOADADDR (.data)
                0x0000000000000296                __data_load_end = (__data_load_start + SIZEOF (.data))

.noinit         0x0000000000800218        0x0
                0x0000000000800218                PROVIDE (__noinit_start, .)
 *(.noinit*)
                0x0000000000800218                PROVIDE (__noinit_end, .)
                0x0000000000800218                _end = .
                0x0000000000800218                PROVIDE (__heap_start, .)

.eeprom         0x0000000000810000        0x0
 *(.eeprom*)
                0x0000000000810000                __eeprom_end = .

.fuse
 *(.fuse)
 *(.lfuse)
 *(.hfuse)
 *(.efuse)

.lock
 *(.lock*)

.signature
 *(.signature*)

.stab           0x0000000000000000     0x105c
 *(.stab)
 .stab          0x0000000000000000      0x6cc /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr5/crtm640.o
 .stab          0x00000000000006cc      0x5a0 main.o
                                        0x5ac (size before relaxing)
 .stab          0x0000000000000c6c      0x3f0 touch.o
                                        0x6e4 (size before relaxing)

.stabstr        0x0000000000000000      0xe16
 *(.stabstr)
 .stabstr       0x0000000000000000      0xe16 /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr5/crtm640.o

.stab.excl
 *(.stab.excl)

.stab.exclstr
 *(.stab.exclstr)

.stab.index
 *(.stab.index)

.stab.indexstr
 *(.stab.indexstr)

.comment
 *(.comment)

.debug
 *(.debug)

.line
 *(.line)

.debug_srcinfo
 *(.debug_srcinfo)

.debug_sfnames
 *(.debug_sfnames)

.debug_aranges
 *(.debug_aranges)

.debug_pubnames
 *(.debug_pubnames)

.debug_info
 *(.debug_info)
 *(.gnu.linkonce.wi.*)

.debug_abbrev
 *(.debug_abbrev)

.debug_line
 *(.debug_line)

.debug_frame
 *(.debug_frame)

.debug_str
 *(.debug_str)

.debug_loc
 *(.debug_loc)

.debug_macinfo
 *(.debug_macinfo)
OUTPUT(ebarn.elf elf32-avr)
LOAD linker stubs
