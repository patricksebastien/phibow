
phibow.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000007c  00800200  000013e0  00001474  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000013e0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00001058  0080027c  0080027c  000014f0  2**0
                  ALLOC
  3 .stab         00003594  00000000  00000000  000014f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001633  00000000  00000000  00004a84  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 c9 00 	jmp	0x192	; 0x192 <__ctors_end>
       4:	0c 94 80 02 	jmp	0x500	; 0x500 <__vector_1>
       8:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
       c:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      10:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      14:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      18:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      1c:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      20:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      24:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      28:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      2c:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      30:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      34:	0c 94 36 05 	jmp	0xa6c	; 0xa6c <__vector_13>
      38:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      3c:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      40:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      44:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      48:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      4c:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      50:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      54:	0c 94 f1 04 	jmp	0x9e2	; 0x9e2 <__vector_21>
      58:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      5c:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      60:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      64:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      68:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      6c:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      70:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      74:	0c 94 75 04 	jmp	0x8ea	; 0x8ea <__vector_29>
      78:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      7c:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      80:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      84:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      88:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      8c:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      90:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      94:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      98:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      9c:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      a0:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      a4:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      a8:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      ac:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      b0:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      b4:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      b8:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      bc:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      c0:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      c4:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      c8:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      cc:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      d0:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      d4:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      d8:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      dc:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      e0:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>

000000e4 <usbDescriptorString0>:
      e4:	04 03 09 04                                         ....

000000e8 <usbDescriptorStringVendor>:
      e8:	24 03 77 00 6f 00 72 00 6b 00 69 00 6e 00 70 00     $.w.o.r.k.i.n.p.
      f8:	72 00 6f 00 67 00 72 00 65 00 73 00 73 00 2e 00     r.o.g.r.e.s.s...
     108:	63 00 61 00                                         c.a.

0000010c <usbDescriptorStringDevice>:
     10c:	0e 03 70 00 68 00 69 00 62 00 6f 00 77 00           ..p.h.i.b.o.w.

0000011a <deviceDescrMIDI>:
     11a:	12 01 10 01 00 00 00 08 c0 16 e4 05 01 00 01 02     ................
     12a:	00 01                                               ..

0000012c <configDescrMIDI>:
     12c:	09 02 65 00 02 01 00 00 fa 09 04 00 00 00 01 01     ..e.............
     13c:	00 00 09 24 01 00 01 09 00 01 01 09 04 01 00 02     ...$............
     14c:	01 03 00 00 07 24 01 00 01 41 00 06 24 02 01 01     .....$...A..$...
     15c:	00 06 24 02 02 02 00 09 24 03 01 03 01 02 01 00     ..$.....$.......
     16c:	09 24 03 02 04 01 01 01 00 09 05 01 03 08 00 0a     .$..............
     17c:	00 00 05 25 01 01 01 09 05 81 03 08 00 0a 00 00     ...%............
     18c:	05 25 01 01 03 00                                   .%....

00000192 <__ctors_end>:
     192:	11 24       	eor	r1, r1
     194:	1f be       	out	0x3f, r1	; 63
     196:	cf ef       	ldi	r28, 0xFF	; 255
     198:	d1 e2       	ldi	r29, 0x21	; 33
     19a:	de bf       	out	0x3e, r29	; 62
     19c:	cd bf       	out	0x3d, r28	; 61

0000019e <__do_copy_data>:
     19e:	12 e0       	ldi	r17, 0x02	; 2
     1a0:	a0 e0       	ldi	r26, 0x00	; 0
     1a2:	b2 e0       	ldi	r27, 0x02	; 2
     1a4:	e0 ee       	ldi	r30, 0xE0	; 224
     1a6:	f3 e1       	ldi	r31, 0x13	; 19
     1a8:	02 c0       	rjmp	.+4      	; 0x1ae <__do_copy_data+0x10>
     1aa:	05 90       	lpm	r0, Z+
     1ac:	0d 92       	st	X+, r0
     1ae:	ac 37       	cpi	r26, 0x7C	; 124
     1b0:	b1 07       	cpc	r27, r17
     1b2:	d9 f7       	brne	.-10     	; 0x1aa <__do_copy_data+0xc>

000001b4 <__do_clear_bss>:
     1b4:	12 e1       	ldi	r17, 0x12	; 18
     1b6:	ac e7       	ldi	r26, 0x7C	; 124
     1b8:	b2 e0       	ldi	r27, 0x02	; 2
     1ba:	01 c0       	rjmp	.+2      	; 0x1be <.do_clear_bss_start>

000001bc <.do_clear_bss_loop>:
     1bc:	1d 92       	st	X+, r1

000001be <.do_clear_bss_start>:
     1be:	a4 3d       	cpi	r26, 0xD4	; 212
     1c0:	b1 07       	cpc	r27, r17
     1c2:	e1 f7       	brne	.-8      	; 0x1bc <.do_clear_bss_loop>
     1c4:	0e 94 39 07 	call	0xe72	; 0xe72 <main>
     1c8:	0c 94 ee 09 	jmp	0x13dc	; 0x13dc <_exit>

000001cc <__bad_interrupt>:
     1cc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001d0 <usbSetInterrupt>:
    txStatus->len = len + 4;    /* len must be given including sync byte */
    DBG2(0x21 + (((int)txStatus >> 3) & 3), txStatus->buffer, len + 3);
}

USB_PUBLIC void usbSetInterrupt(uchar *data, uchar len)
{
     1d0:	1f 93       	push	r17
     1d2:	16 2f       	mov	r17, r22
{
uchar   *p;
char    i;

#if USB_CFG_IMPLEMENT_HALT
    if(usbTxLen1 == USBPID_STALL)
     1d4:	20 91 a4 02 	lds	r18, 0x02A4
     1d8:	2e 31       	cpi	r18, 0x1E	; 30
     1da:	f9 f0       	breq	.+62     	; 0x21a <usbSetInterrupt+0x4a>
        return;
#endif
    if(txStatus->len & 0x10){   /* packet buffer was empty */
     1dc:	20 91 a4 02 	lds	r18, 0x02A4
     1e0:	24 ff       	sbrs	r18, 4
     1e2:	07 c0       	rjmp	.+14     	; 0x1f2 <usbSetInterrupt+0x22>
        txStatus->buffer[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* toggle token */
     1e4:	20 91 a5 02 	lds	r18, 0x02A5
     1e8:	38 e8       	ldi	r19, 0x88	; 136
     1ea:	23 27       	eor	r18, r19
     1ec:	20 93 a5 02 	sts	0x02A5, r18
     1f0:	03 c0       	rjmp	.+6      	; 0x1f8 <usbSetInterrupt+0x28>
    }else{
        txStatus->len = USBPID_NAK; /* avoid sending outdated (overwritten) interrupt data */
     1f2:	2a e5       	ldi	r18, 0x5A	; 90
     1f4:	20 93 a4 02 	sts	0x02A4, r18
    }
    p = txStatus->buffer + 1;
    i = len;
     1f8:	21 2f       	mov	r18, r17
     1fa:	dc 01       	movw	r26, r24
    if(txStatus->len & 0x10){   /* packet buffer was empty */
        txStatus->buffer[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* toggle token */
    }else{
        txStatus->len = USBPID_NAK; /* avoid sending outdated (overwritten) interrupt data */
    }
    p = txStatus->buffer + 1;
     1fc:	e6 ea       	ldi	r30, 0xA6	; 166
     1fe:	f2 e0       	ldi	r31, 0x02	; 2
    i = len;
    do{                         /* if len == 0, we still copy 1 byte, but that's no problem */
        *p++ = *data++;
     200:	8d 91       	ld	r24, X+
     202:	81 93       	st	Z+, r24
    }while(--i > 0);            /* loop control at the end is 2 bytes shorter than at beginning */
     204:	21 50       	subi	r18, 0x01	; 1
     206:	12 16       	cp	r1, r18
     208:	dc f3       	brlt	.-10     	; 0x200 <usbSetInterrupt+0x30>
    usbCrc16Append(&txStatus->buffer[1], len);
     20a:	86 ea       	ldi	r24, 0xA6	; 166
     20c:	92 e0       	ldi	r25, 0x02	; 2
     20e:	61 2f       	mov	r22, r17
     210:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <usbCrc16Append>
    txStatus->len = len + 4;    /* len must be given including sync byte */
     214:	1c 5f       	subi	r17, 0xFC	; 252
     216:	10 93 a4 02 	sts	0x02A4, r17
}

USB_PUBLIC void usbSetInterrupt(uchar *data, uchar len)
{
    usbGenericSetInterrupt(data, len, &usbTxStatus1);
}
     21a:	1f 91       	pop	r17
     21c:	08 95       	ret

0000021e <usbPoll>:
}

/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbPoll(void)
{
     21e:	1f 93       	push	r17
     220:	cf 93       	push	r28
     222:	df 93       	push	r29
schar   len;
uchar   i;

    len = usbRxLen - 3;
     224:	60 91 b5 02 	lds	r22, 0x02B5
     228:	63 50       	subi	r22, 0x03	; 3
    if(len >= 0){
     22a:	67 fd       	sbrc	r22, 7
     22c:	d1 c0       	rjmp	.+418    	; 0x3d0 <usbPoll+0x1b2>
 * need data integrity checks with this driver, check the CRC in your app
 * code and report errors back to the host. Since the ACK was already sent,
 * retries must be handled on application level.
 * unsigned crc = usbCrc16(buffer + 1, usbRxLen - 3);
 */
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
     22e:	80 91 b2 02 	lds	r24, 0x02B2
     232:	cc e0       	ldi	r28, 0x0C	; 12
     234:	d0 e0       	ldi	r29, 0x00	; 0
     236:	c8 1b       	sub	r28, r24
     238:	d1 09       	sbc	r29, r1
     23a:	c7 54       	subi	r28, 0x47	; 71
     23c:	dd 4f       	sbci	r29, 0xFD	; 253
 * 0...0x0f for OUT on endpoint X
 */
    DBG2(0x10 + (usbRxToken & 0xf), data, len + 2); /* SETUP=1d, SETUP-DATA=11, OUTx=1x */
    USB_RX_USER_HOOK(data, len)
#if USB_CFG_IMPLEMENT_FN_WRITEOUT
    if(usbRxToken < 0x10){  /* OUT to endpoint != 0: endpoint number in usbRxToken */
     23e:	80 91 b1 02 	lds	r24, 0x02B1
     242:	80 31       	cpi	r24, 0x10	; 16
     244:	20 f4       	brcc	.+8      	; 0x24e <usbPoll+0x30>
        usbFunctionWriteOut(data, len);
     246:	ce 01       	movw	r24, r28
     248:	0e 94 cd 06 	call	0xd9a	; 0xd9a <usbFunctionWriteOut>
     24c:	bf c0       	rjmp	.+382    	; 0x3cc <usbPoll+0x1ae>
        return;
    }
#endif
    if(usbRxToken == (uchar)USBPID_SETUP){
     24e:	8d 32       	cpi	r24, 0x2D	; 45
     250:	09 f0       	breq	.+2      	; 0x254 <usbPoll+0x36>
     252:	ab c0       	rjmp	.+342    	; 0x3aa <usbPoll+0x18c>
        if(len != 8)    /* Setup size must be always 8 bytes. Ignore otherwise. */
     254:	68 30       	cpi	r22, 0x08	; 8
     256:	09 f0       	breq	.+2      	; 0x25a <usbPoll+0x3c>
     258:	b9 c0       	rjmp	.+370    	; 0x3cc <usbPoll+0x1ae>
            return;
        usbMsgLen_t replyLen;
        usbTxBuf[0] = USBPID_DATA0;         /* initialize data toggling */
     25a:	83 ec       	ldi	r24, 0xC3	; 195
     25c:	80 93 99 02 	sts	0x0299, r24
        usbTxLen = USBPID_NAK;              /* abort pending transmit */
     260:	8a e5       	ldi	r24, 0x5A	; 90
     262:	80 93 00 02 	sts	0x0200, r24
        usbMsgFlags = 0;
     266:	10 92 7c 02 	sts	0x027C, r1
        uchar type = rq->bmRequestType & USBRQ_TYPE_MASK;
     26a:	38 81       	ld	r19, Y
     26c:	83 2f       	mov	r24, r19
     26e:	80 76       	andi	r24, 0x60	; 96
        if(type != USBRQ_TYPE_STANDARD){    /* standard requests are handled by driver */
     270:	21 f0       	breq	.+8      	; 0x27a <usbPoll+0x5c>
            replyLen = usbFunctionSetup(data);
     272:	ce 01       	movw	r24, r28
     274:	0e 94 c0 06 	call	0xd80	; 0xd80 <usbFunctionSetup>
     278:	85 c0       	rjmp	.+266    	; 0x384 <usbPoll+0x166>
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
uchar   value = rq->wValue.bytes[0];
     27a:	9a 81       	ldd	r25, Y+2	; 0x02
#if USB_CFG_IMPLEMENT_HALT
uchar   index = rq->wIndex.bytes[0];
     27c:	2c 81       	ldd	r18, Y+4	; 0x04
#endif

    dataPtr[0] = 0; /* default reply common to USBRQ_GET_STATUS and USBRQ_GET_INTERFACE */
     27e:	10 92 a2 02 	sts	0x02A2, r1
    SWITCH_START(rq->bRequest)
     282:	89 81       	ldd	r24, Y+1	; 0x01
    SWITCH_CASE(USBRQ_GET_STATUS)           /* 0 */
     284:	88 23       	and	r24, r24
     286:	99 f4       	brne	.+38     	; 0x2ae <usbPoll+0x90>
        uchar recipient = rq->bmRequestType & USBRQ_RCPT_MASK;  /* assign arith ops to variables to enforce byte size */
     288:	3f 71       	andi	r19, 0x1F	; 31
        if(USB_CFG_IS_SELF_POWERED && recipient == USBRQ_RCPT_DEVICE)
            dataPtr[0] =  USB_CFG_IS_SELF_POWERED;
#if USB_CFG_IMPLEMENT_HALT
        if(recipient == USBRQ_RCPT_ENDPOINT && index == 0x81)   /* request status for endpoint 1 */
     28a:	32 30       	cpi	r19, 0x02	; 2
     28c:	51 f4       	brne	.+20     	; 0x2a2 <usbPoll+0x84>
     28e:	21 38       	cpi	r18, 0x81	; 129
     290:	41 f4       	brne	.+16     	; 0x2a2 <usbPoll+0x84>
            dataPtr[0] = usbTxLen1 == USBPID_STALL;
     292:	90 91 a4 02 	lds	r25, 0x02A4
     296:	81 e0       	ldi	r24, 0x01	; 1
     298:	9e 31       	cpi	r25, 0x1E	; 30
     29a:	09 f0       	breq	.+2      	; 0x29e <usbPoll+0x80>
     29c:	80 e0       	ldi	r24, 0x00	; 0
     29e:	80 93 a2 02 	sts	0x02A2, r24
#endif
        dataPtr[1] = 0;
     2a2:	10 92 a3 02 	sts	0x02A3, r1
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
     2a6:	22 ea       	ldi	r18, 0xA2	; 162
     2a8:	32 e0       	ldi	r19, 0x02	; 2
#if USB_CFG_IMPLEMENT_HALT
        if(recipient == USBRQ_RCPT_ENDPOINT && index == 0x81)   /* request status for endpoint 1 */
            dataPtr[0] = usbTxLen1 == USBPID_STALL;
#endif
        dataPtr[1] = 0;
        len = 2;
     2aa:	82 e0       	ldi	r24, 0x02	; 2
     2ac:	66 c0       	rjmp	.+204    	; 0x37a <usbPoll+0x15c>
#if USB_CFG_IMPLEMENT_HALT
    SWITCH_CASE2(USBRQ_CLEAR_FEATURE, USBRQ_SET_FEATURE)    /* 1, 3 */
     2ae:	81 30       	cpi	r24, 0x01	; 1
     2b0:	11 f0       	breq	.+4      	; 0x2b6 <usbPoll+0x98>
     2b2:	83 30       	cpi	r24, 0x03	; 3
     2b4:	89 f4       	brne	.+34     	; 0x2d8 <usbPoll+0xba>
        if(value == 0 && index == 0x81){    /* feature 0 == HALT for endpoint == 1 */
     2b6:	99 23       	and	r25, r25
     2b8:	09 f0       	breq	.+2      	; 0x2bc <usbPoll+0x9e>
     2ba:	5c c0       	rjmp	.+184    	; 0x374 <usbPoll+0x156>
     2bc:	21 38       	cpi	r18, 0x81	; 129
     2be:	09 f0       	breq	.+2      	; 0x2c2 <usbPoll+0xa4>
     2c0:	59 c0       	rjmp	.+178    	; 0x374 <usbPoll+0x156>
            usbTxLen1 = rq->bRequest == USBRQ_CLEAR_FEATURE ? USBPID_NAK : USBPID_STALL;
     2c2:	81 30       	cpi	r24, 0x01	; 1
     2c4:	11 f4       	brne	.+4      	; 0x2ca <usbPoll+0xac>
     2c6:	8a e5       	ldi	r24, 0x5A	; 90
     2c8:	01 c0       	rjmp	.+2      	; 0x2cc <usbPoll+0xae>
     2ca:	8e e1       	ldi	r24, 0x1E	; 30
     2cc:	80 93 a4 02 	sts	0x02A4, r24
/* ------------------------------------------------------------------------- */

static inline void  usbResetDataToggling(void)
{
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    USB_SET_DATATOKEN1(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
     2d0:	8b e4       	ldi	r24, 0x4B	; 75
     2d2:	80 93 a5 02 	sts	0x02A5, r24
     2d6:	4e c0       	rjmp	.+156    	; 0x374 <usbPoll+0x156>
        if(value == 0 && index == 0x81){    /* feature 0 == HALT for endpoint == 1 */
            usbTxLen1 = rq->bRequest == USBRQ_CLEAR_FEATURE ? USBPID_NAK : USBPID_STALL;
            usbResetDataToggling();
        }
#endif
    SWITCH_CASE(USBRQ_SET_ADDRESS)          /* 5 */
     2d8:	85 30       	cpi	r24, 0x05	; 5
     2da:	19 f4       	brne	.+6      	; 0x2e2 <usbPoll+0xc4>
        usbNewDeviceAddr = value;
     2dc:	90 93 b6 02 	sts	0x02B6, r25
     2e0:	49 c0       	rjmp	.+146    	; 0x374 <usbPoll+0x156>
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
     2e2:	86 30       	cpi	r24, 0x06	; 6
     2e4:	71 f5       	brne	.+92     	; 0x342 <usbPoll+0x124>
static inline usbMsgLen_t usbDriverDescriptor(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar       flags = USB_FLG_MSGPTR_IS_ROM;

    SWITCH_START(rq->wValue.bytes[1])
     2e6:	8b 81       	ldd	r24, Y+3	; 0x03
    SWITCH_CASE(USBDESCR_DEVICE)    /* 1 */
     2e8:	81 30       	cpi	r24, 0x01	; 1
     2ea:	11 f0       	breq	.+4      	; 0x2f0 <usbPoll+0xd2>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_DEVICE, usbDescriptorDevice)
    SWITCH_CASE(USBDESCR_CONFIG)    /* 2 */
     2ec:	82 30       	cpi	r24, 0x02	; 2
     2ee:	21 f4       	brne	.+8      	; 0x2f8 <usbPoll+0xda>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_CONFIGURATION, usbDescriptorConfiguration)
     2f0:	ce 01       	movw	r24, r28
     2f2:	0e 94 ac 06 	call	0xd58	; 0xd58 <usbFunctionDescriptor>
     2f6:	21 c0       	rjmp	.+66     	; 0x33a <usbPoll+0x11c>
    SWITCH_CASE(USBDESCR_STRING)    /* 3 */
     2f8:	83 30       	cpi	r24, 0x03	; 3
     2fa:	f1 f4       	brne	.+60     	; 0x338 <usbPoll+0x11a>
        if(USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_RAM)
            flags = 0;
        len = usbFunctionDescriptor(rq);
#else   /* USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC */
        SWITCH_START(rq->wValue.bytes[0])
        SWITCH_CASE(0)
     2fc:	99 23       	and	r25, r25
     2fe:	41 f4       	brne	.+16     	; 0x310 <usbPoll+0xf2>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_0, usbDescriptorString0)
     300:	84 ee       	ldi	r24, 0xE4	; 228
     302:	90 e0       	ldi	r25, 0x00	; 0
     304:	90 93 b4 02 	sts	0x02B4, r25
     308:	80 93 b3 02 	sts	0x02B3, r24
     30c:	84 e0       	ldi	r24, 0x04	; 4
     30e:	15 c0       	rjmp	.+42     	; 0x33a <usbPoll+0x11c>
        SWITCH_CASE(1)
     310:	91 30       	cpi	r25, 0x01	; 1
     312:	41 f4       	brne	.+16     	; 0x324 <usbPoll+0x106>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_VENDOR, usbDescriptorStringVendor)
     314:	88 ee       	ldi	r24, 0xE8	; 232
     316:	90 e0       	ldi	r25, 0x00	; 0
     318:	90 93 b4 02 	sts	0x02B4, r25
     31c:	80 93 b3 02 	sts	0x02B3, r24
     320:	84 e2       	ldi	r24, 0x24	; 36
     322:	0b c0       	rjmp	.+22     	; 0x33a <usbPoll+0x11c>
        SWITCH_CASE(2)
     324:	92 30       	cpi	r25, 0x02	; 2
     326:	41 f4       	brne	.+16     	; 0x338 <usbPoll+0x11a>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_PRODUCT, usbDescriptorStringDevice)
     328:	8c e0       	ldi	r24, 0x0C	; 12
     32a:	91 e0       	ldi	r25, 0x01	; 1
     32c:	90 93 b4 02 	sts	0x02B4, r25
     330:	80 93 b3 02 	sts	0x02B3, r24
     334:	8e e0       	ldi	r24, 0x0E	; 14
     336:	01 c0       	rjmp	.+2      	; 0x33a <usbPoll+0x11c>
/* usbDriverDescriptor() is similar to usbFunctionDescriptor(), but used
 * internally for all types of descriptors.
 */
static inline usbMsgLen_t usbDriverDescriptor(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
     338:	80 e0       	ldi	r24, 0x00	; 0
    SWITCH_DEFAULT
        if(USB_CFG_DESCR_PROPS_UNKNOWN & USB_PROP_IS_DYNAMIC){
            len = usbFunctionDescriptor(rq);
        }
    SWITCH_END
    usbMsgFlags = flags;
     33a:	90 e4       	ldi	r25, 0x40	; 64
     33c:	90 93 7c 02 	sts	0x027C, r25
     340:	21 c0       	rjmp	.+66     	; 0x384 <usbPoll+0x166>
        usbNewDeviceAddr = value;
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
        len = usbDriverDescriptor(rq);
        goto skipMsgPtrAssignment;
    SWITCH_CASE(USBRQ_GET_CONFIGURATION)    /* 8 */
     342:	88 30       	cpi	r24, 0x08	; 8
     344:	81 f0       	breq	.+32     	; 0x366 <usbPoll+0x148>
        dataPtr = &usbConfiguration;  /* send current configuration value */
        len = 1;
    SWITCH_CASE(USBRQ_SET_CONFIGURATION)    /* 9 */
     346:	89 30       	cpi	r24, 0x09	; 9
     348:	19 f4       	brne	.+6      	; 0x350 <usbPoll+0x132>
        usbConfiguration = value;
     34a:	90 93 b8 02 	sts	0x02B8, r25
     34e:	07 c0       	rjmp	.+14     	; 0x35e <usbPoll+0x140>
        usbResetStall();
    SWITCH_CASE(USBRQ_GET_INTERFACE)        /* 10 */
     350:	8a 30       	cpi	r24, 0x0A	; 10
     352:	61 f0       	breq	.+24     	; 0x36c <usbPoll+0x14e>
        len = 1;
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    SWITCH_CASE(USBRQ_SET_INTERFACE)        /* 11 */
     354:	8b 30       	cpi	r24, 0x0B	; 11
     356:	71 f4       	brne	.+28     	; 0x374 <usbPoll+0x156>
/* ------------------------------------------------------------------------- */

static inline void  usbResetDataToggling(void)
{
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    USB_SET_DATATOKEN1(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
     358:	8b e4       	ldi	r24, 0x4B	; 75
     35a:	80 93 a5 02 	sts	0x02A5, r24
}

static inline void  usbResetStall(void)
{
#if USB_CFG_IMPLEMENT_HALT && USB_CFG_HAVE_INTRIN_ENDPOINT
        usbTxLen1 = USBPID_NAK;
     35e:	8a e5       	ldi	r24, 0x5A	; 90
     360:	80 93 a4 02 	sts	0x02A4, r24
     364:	07 c0       	rjmp	.+14     	; 0x374 <usbPoll+0x156>
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
        len = usbDriverDescriptor(rq);
        goto skipMsgPtrAssignment;
    SWITCH_CASE(USBRQ_GET_CONFIGURATION)    /* 8 */
        dataPtr = &usbConfiguration;  /* send current configuration value */
     366:	28 eb       	ldi	r18, 0xB8	; 184
     368:	32 e0       	ldi	r19, 0x02	; 2
     36a:	02 c0       	rjmp	.+4      	; 0x370 <usbPoll+0x152>
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
     36c:	22 ea       	ldi	r18, 0xA2	; 162
     36e:	32 e0       	ldi	r19, 0x02	; 2
        len = 1;
    SWITCH_CASE(USBRQ_SET_CONFIGURATION)    /* 9 */
        usbConfiguration = value;
        usbResetStall();
    SWITCH_CASE(USBRQ_GET_INTERFACE)        /* 10 */
        len = 1;
     370:	81 e0       	ldi	r24, 0x01	; 1
     372:	03 c0       	rjmp	.+6      	; 0x37a <usbPoll+0x15c>
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
     374:	22 ea       	ldi	r18, 0xA2	; 162
     376:	32 e0       	ldi	r19, 0x02	; 2
/* usbDriverSetup() is similar to usbFunctionSetup(), but it's used for
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
     378:	80 e0       	ldi	r24, 0x00	; 0
        usbResetStall();
#endif
    SWITCH_DEFAULT                          /* 7=SET_DESCRIPTOR, 12=SYNC_FRAME */
        /* Should we add an optional hook here? */
    SWITCH_END
    usbMsgPtr = (usbMsgPtr_t)dataPtr;
     37a:	30 93 b4 02 	sts	0x02B4, r19
     37e:	20 93 b3 02 	sts	0x02B3, r18
     382:	09 c0       	rjmp	.+18     	; 0x396 <usbPoll+0x178>
            replyLen = usbFunctionSetup(data);
        }else{
            replyLen = usbDriverSetup(rq);
        }
#if USB_CFG_IMPLEMENT_FN_READ || USB_CFG_IMPLEMENT_FN_WRITE
        if(replyLen == USB_NO_MSG){         /* use user-supplied read/write function */
     384:	8f 3f       	cpi	r24, 0xFF	; 255
     386:	39 f4       	brne	.+14     	; 0x396 <usbPoll+0x178>
            /* do some conditioning on replyLen, but on IN transfers only */
            if((rq->bmRequestType & USBRQ_DIR_MASK) != USBRQ_DIR_HOST_TO_DEVICE){
     388:	98 81       	ld	r25, Y
     38a:	97 fd       	sbrc	r25, 7
                if(sizeof(replyLen) < sizeof(rq->wLength.word)){ /* help compiler with optimizing */
                    replyLen = rq->wLength.bytes[0];
     38c:	8e 81       	ldd	r24, Y+6	; 0x06
                }else{
                    replyLen = rq->wLength.word;
                }
            }
            usbMsgFlags = USB_FLG_USE_USER_RW;
     38e:	90 e8       	ldi	r25, 0x80	; 128
     390:	90 93 7c 02 	sts	0x027C, r25
     394:	07 c0       	rjmp	.+14     	; 0x3a4 <usbPoll+0x186>
        }else   /* The 'else' prevents that we limit a replyLen of USB_NO_MSG to the maximum transfer len. */
#endif
        if(sizeof(replyLen) < sizeof(rq->wLength.word)){ /* help compiler with optimizing */
            if(!rq->wLength.bytes[1] && replyLen > rq->wLength.bytes[0])    /* limit length to max */
     396:	9f 81       	ldd	r25, Y+7	; 0x07
     398:	99 23       	and	r25, r25
     39a:	21 f4       	brne	.+8      	; 0x3a4 <usbPoll+0x186>
     39c:	9e 81       	ldd	r25, Y+6	; 0x06
     39e:	98 17       	cp	r25, r24
     3a0:	08 f4       	brcc	.+2      	; 0x3a4 <usbPoll+0x186>
     3a2:	89 2f       	mov	r24, r25
                replyLen = rq->wLength.bytes[0];
        }else{
            if(replyLen > rq->wLength.word)     /* limit length to max */
                replyLen = rq->wLength.word;
        }
        usbMsgLen = replyLen;
     3a4:	80 93 01 02 	sts	0x0201, r24
     3a8:	11 c0       	rjmp	.+34     	; 0x3cc <usbPoll+0x1ae>
    }else{  /* usbRxToken must be USBPID_OUT, which means data phase of setup (control-out) */
#if USB_CFG_IMPLEMENT_FN_WRITE
        if(usbMsgFlags & USB_FLG_USE_USER_RW){
     3aa:	80 91 7c 02 	lds	r24, 0x027C
     3ae:	87 ff       	sbrs	r24, 7
     3b0:	0d c0       	rjmp	.+26     	; 0x3cc <usbPoll+0x1ae>
            uchar rval = usbFunctionWrite(data, len);
     3b2:	ce 01       	movw	r24, r28
     3b4:	0e 94 d0 06 	call	0xda0	; 0xda0 <usbFunctionWrite>
            if(rval == 0xff){   /* an error occurred */
     3b8:	8f 3f       	cpi	r24, 0xFF	; 255
     3ba:	21 f4       	brne	.+8      	; 0x3c4 <usbPoll+0x1a6>
                usbTxLen = USBPID_STALL;
     3bc:	8e e1       	ldi	r24, 0x1E	; 30
     3be:	80 93 00 02 	sts	0x0200, r24
     3c2:	04 c0       	rjmp	.+8      	; 0x3cc <usbPoll+0x1ae>
            }else if(rval != 0){    /* This was the final package */
     3c4:	88 23       	and	r24, r24
     3c6:	11 f0       	breq	.+4      	; 0x3cc <usbPoll+0x1ae>
                usbMsgLen = 0;  /* answer with a zero-sized data packet */
     3c8:	10 92 01 02 	sts	0x0201, r1
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
#if USB_CFG_HAVE_FLOWCONTROL
        if(usbRxLen > 0)    /* only mark as available if not inactivated */
            usbRxLen = 0;
#else
        usbRxLen = 0;       /* mark rx buffer as available */
     3cc:	10 92 b5 02 	sts	0x02B5, r1
#endif
    }
    if(usbTxLen & 0x10){    /* transmit system idle */
     3d0:	80 91 00 02 	lds	r24, 0x0200
     3d4:	84 ff       	sbrs	r24, 4
     3d6:	5d c0       	rjmp	.+186    	; 0x492 <usbPoll+0x274>
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
     3d8:	80 91 01 02 	lds	r24, 0x0201
     3dc:	8f 3f       	cpi	r24, 0xFF	; 255
     3de:	09 f4       	brne	.+2      	; 0x3e2 <usbPoll+0x1c4>
     3e0:	58 c0       	rjmp	.+176    	; 0x492 <usbPoll+0x274>
     3e2:	18 2f       	mov	r17, r24
     3e4:	89 30       	cpi	r24, 0x09	; 9
     3e6:	08 f0       	brcs	.+2      	; 0x3ea <usbPoll+0x1cc>
     3e8:	18 e0       	ldi	r17, 0x08	; 8
uchar       len;

    wantLen = usbMsgLen;
    if(wantLen > 8)
        wantLen = 8;
    usbMsgLen -= wantLen;
     3ea:	81 1b       	sub	r24, r17
     3ec:	80 93 01 02 	sts	0x0201, r24
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
     3f0:	80 91 99 02 	lds	r24, 0x0299
     3f4:	98 e8       	ldi	r25, 0x88	; 136
     3f6:	89 27       	eor	r24, r25
     3f8:	80 93 99 02 	sts	0x0299, r24
/* This function is similar to usbFunctionRead(), but it's also called for
 * data handled automatically by the driver (e.g. descriptor reads).
 */
static uchar usbDeviceRead(uchar *data, uchar len)
{
    if(len > 0){    /* don't bother app with 0 sized reads */
     3fc:	11 23       	and	r17, r17
     3fe:	b9 f1       	breq	.+110    	; 0x46e <usbPoll+0x250>
#if USB_CFG_IMPLEMENT_FN_READ
        if(usbMsgFlags & USB_FLG_USE_USER_RW){
     400:	80 91 7c 02 	lds	r24, 0x027C
     404:	87 ff       	sbrs	r24, 7
     406:	09 c0       	rjmp	.+18     	; 0x41a <usbPoll+0x1fc>
            len = usbFunctionRead(data, len);
     408:	8a e9       	ldi	r24, 0x9A	; 154
     40a:	92 e0       	ldi	r25, 0x02	; 2
     40c:	61 2f       	mov	r22, r17
     40e:	0e 94 d2 06 	call	0xda4	; 0xda4 <usbFunctionRead>
     412:	18 2f       	mov	r17, r24
    if(wantLen > 8)
        wantLen = 8;
    usbMsgLen -= wantLen;
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
    len = usbDeviceRead(usbTxBuf + 1, wantLen);
    if(len <= 8){           /* valid data packet */
     414:	89 30       	cpi	r24, 0x09	; 9
     416:	b8 f5       	brcc	.+110    	; 0x486 <usbPoll+0x268>
     418:	2a c0       	rjmp	.+84     	; 0x46e <usbPoll+0x250>
            len = usbFunctionRead(data, len);
        }else
#endif
        {
            uchar i = len;
            usbMsgPtr_t r = usbMsgPtr;
     41a:	20 91 b3 02 	lds	r18, 0x02B3
     41e:	30 91 b4 02 	lds	r19, 0x02B4
     422:	41 2f       	mov	r20, r17
     424:	41 50       	subi	r20, 0x01	; 1
            if(usbMsgFlags & USB_FLG_MSGPTR_IS_ROM){    /* ROM data */
     426:	86 ff       	sbrs	r24, 6
     428:	0e c0       	rjmp	.+28     	; 0x446 <usbPoll+0x228>
#endif
}

/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbPoll(void)
     42a:	50 e0       	ldi	r21, 0x00	; 0
     42c:	ea 01       	movw	r28, r20
     42e:	c5 56       	subi	r28, 0x65	; 101
     430:	dd 4f       	sbci	r29, 0xFD	; 253
     432:	f9 01       	movw	r30, r18
     434:	aa e9       	ldi	r26, 0x9A	; 154
     436:	b2 e0       	ldi	r27, 0x02	; 2
        {
            uchar i = len;
            usbMsgPtr_t r = usbMsgPtr;
            if(usbMsgFlags & USB_FLG_MSGPTR_IS_ROM){    /* ROM data */
                do{
                    uchar c = USB_READ_FLASH(r);    /* assign to char size variable to enforce byte ops */
     438:	84 91       	lpm	r24, Z+
                    *data++ = c;
     43a:	8d 93       	st	X+, r24
                    r++;
     43c:	31 96       	adiw	r30, 0x01	; 1
                }while(--i);
     43e:	ac 17       	cp	r26, r28
     440:	bd 07       	cpc	r27, r29
     442:	d1 f7       	brne	.-12     	; 0x438 <usbPoll+0x21a>
     444:	0c c0       	rjmp	.+24     	; 0x45e <usbPoll+0x240>
     446:	d9 01       	movw	r26, r18
#endif
}

/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbPoll(void)
     448:	50 e0       	ldi	r21, 0x00	; 0
     44a:	ca 01       	movw	r24, r20
     44c:	85 56       	subi	r24, 0x65	; 101
     44e:	9d 4f       	sbci	r25, 0xFD	; 253
     450:	ea e9       	ldi	r30, 0x9A	; 154
     452:	f2 e0       	ldi	r31, 0x02	; 2
                    *data++ = c;
                    r++;
                }while(--i);
            }else{  /* RAM data */
                do{
                    *data++ = *((uchar *)r);
     454:	6d 91       	ld	r22, X+
     456:	61 93       	st	Z+, r22
                    r++;
                }while(--i);
     458:	e8 17       	cp	r30, r24
     45a:	f9 07       	cpc	r31, r25
     45c:	d9 f7       	brne	.-10     	; 0x454 <usbPoll+0x236>
#endif
}

/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbPoll(void)
     45e:	4f 5f       	subi	r20, 0xFF	; 255
     460:	5f 4f       	sbci	r21, 0xFF	; 255
                }while(--i);
            }else{  /* RAM data */
                do{
                    *data++ = *((uchar *)r);
                    r++;
                }while(--i);
     462:	42 0f       	add	r20, r18
     464:	53 1f       	adc	r21, r19
            }
            usbMsgPtr = r;
     466:	50 93 b4 02 	sts	0x02B4, r21
     46a:	40 93 b3 02 	sts	0x02B3, r20
        wantLen = 8;
    usbMsgLen -= wantLen;
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
    len = usbDeviceRead(usbTxBuf + 1, wantLen);
    if(len <= 8){           /* valid data packet */
        usbCrc16Append(&usbTxBuf[1], len);
     46e:	8a e9       	ldi	r24, 0x9A	; 154
     470:	92 e0       	ldi	r25, 0x02	; 2
     472:	61 2f       	mov	r22, r17
     474:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <usbCrc16Append>
        len += 4;           /* length including sync byte */
     478:	1c 5f       	subi	r17, 0xFC	; 252
        if(len < 12)        /* a partial package identifies end of message */
     47a:	1c 30       	cpi	r17, 0x0C	; 12
     47c:	41 f0       	breq	.+16     	; 0x48e <usbPoll+0x270>
            usbMsgLen = USB_NO_MSG;
     47e:	8f ef       	ldi	r24, 0xFF	; 255
     480:	80 93 01 02 	sts	0x0201, r24
     484:	04 c0       	rjmp	.+8      	; 0x48e <usbPoll+0x270>
    }else{
        len = USBPID_STALL;   /* stall the endpoint */
        usbMsgLen = USB_NO_MSG;
     486:	8f ef       	ldi	r24, 0xFF	; 255
     488:	80 93 01 02 	sts	0x0201, r24
        usbCrc16Append(&usbTxBuf[1], len);
        len += 4;           /* length including sync byte */
        if(len < 12)        /* a partial package identifies end of message */
            usbMsgLen = USB_NO_MSG;
    }else{
        len = USBPID_STALL;   /* stall the endpoint */
     48c:	1e e1       	ldi	r17, 0x1E	; 30
        usbMsgLen = USB_NO_MSG;
    }
    usbTxLen = len;
     48e:	10 93 00 02 	sts	0x0200, r17
    if(usbTxLen & 0x10){    /* transmit system idle */
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--){
     492:	84 e1       	ldi	r24, 0x14	; 20
        uchar usbLineStatus = USBIN & USBMASK;
     494:	99 b1       	in	r25, 0x09	; 9
     496:	93 70       	andi	r25, 0x03	; 3
        if(usbLineStatus != 0)  /* SE0 has ended */
     498:	49 f4       	brne	.+18     	; 0x4ac <usbPoll+0x28e>
    if(usbTxLen & 0x10){    /* transmit system idle */
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--){
     49a:	81 50       	subi	r24, 0x01	; 1
     49c:	d9 f7       	brne	.-10     	; 0x494 <usbPoll+0x276>
        uchar usbLineStatus = USBIN & USBMASK;
        if(usbLineStatus != 0)  /* SE0 has ended */
            goto isNotReset;
    }
    /* RESET condition, called multiple times during reset */
    usbNewDeviceAddr = 0;
     49e:	10 92 b6 02 	sts	0x02B6, r1
    usbDeviceAddr = 0;
     4a2:	10 92 b0 02 	sts	0x02B0, r1
}

static inline void  usbResetStall(void)
{
#if USB_CFG_IMPLEMENT_HALT && USB_CFG_HAVE_INTRIN_ENDPOINT
        usbTxLen1 = USBPID_NAK;
     4a6:	8a e5       	ldi	r24, 0x5A	; 90
     4a8:	80 93 a4 02 	sts	0x02A4, r24
    usbDeviceAddr = 0;
    usbResetStall();
    DBG1(0xff, 0, 0);
isNotReset:
    usbHandleResetHook(i);
}
     4ac:	df 91       	pop	r29
     4ae:	cf 91       	pop	r28
     4b0:	1f 91       	pop	r17
     4b2:	08 95       	ret

000004b4 <usbInit>:
/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbInit(void)
{
#if USB_INTR_CFG_SET != 0
    USB_INTR_CFG |= USB_INTR_CFG_SET;
     4b4:	e9 e6       	ldi	r30, 0x69	; 105
     4b6:	f0 e0       	ldi	r31, 0x00	; 0
     4b8:	80 81       	ld	r24, Z
     4ba:	83 60       	ori	r24, 0x03	; 3
     4bc:	80 83       	st	Z, r24
#endif
#if USB_INTR_CFG_CLR != 0
    USB_INTR_CFG &= ~(USB_INTR_CFG_CLR);
#endif
    USB_INTR_ENABLE |= (1 << USB_INTR_ENABLE_BIT);
     4be:	e8 9a       	sbi	0x1d, 0	; 29
/* ------------------------------------------------------------------------- */

static inline void  usbResetDataToggling(void)
{
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    USB_SET_DATATOKEN1(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
     4c0:	8b e4       	ldi	r24, 0x4B	; 75
     4c2:	80 93 a5 02 	sts	0x02A5, r24
    USB_INTR_CFG &= ~(USB_INTR_CFG_CLR);
#endif
    USB_INTR_ENABLE |= (1 << USB_INTR_ENABLE_BIT);
    usbResetDataToggling();
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    usbTxLen1 = USBPID_NAK;
     4c6:	8a e5       	ldi	r24, 0x5A	; 90
     4c8:	80 93 a4 02 	sts	0x02A4, r24
#if USB_CFG_HAVE_INTRIN_ENDPOINT3
    usbTxLen3 = USBPID_NAK;
#endif
#endif
}
     4cc:	08 95       	ret

000004ce <usbCrc16>:
     4ce:	a8 2f       	mov	r26, r24
     4d0:	b9 2f       	mov	r27, r25
     4d2:	80 e0       	ldi	r24, 0x00	; 0
     4d4:	90 e0       	ldi	r25, 0x00	; 0
     4d6:	41 e0       	ldi	r20, 0x01	; 1
     4d8:	50 ea       	ldi	r21, 0xA0	; 160
     4da:	60 95       	com	r22
     4dc:	30 e0       	ldi	r19, 0x00	; 0
     4de:	09 c0       	rjmp	.+18     	; 0x4f2 <usbCrcLoopEntry>

000004e0 <usbCrcByteLoop>:
     4e0:	2d 91       	ld	r18, X+
     4e2:	82 27       	eor	r24, r18

000004e4 <usbCrcBitLoop>:
     4e4:	97 95       	ror	r25
     4e6:	87 95       	ror	r24
     4e8:	10 f0       	brcs	.+4      	; 0x4ee <usbCrcNoXor>
     4ea:	84 27       	eor	r24, r20
     4ec:	95 27       	eor	r25, r21

000004ee <usbCrcNoXor>:
     4ee:	30 5e       	subi	r19, 0xE0	; 224
     4f0:	c8 f3       	brcs	.-14     	; 0x4e4 <usbCrcBitLoop>

000004f2 <usbCrcLoopEntry>:
     4f2:	6f 5f       	subi	r22, 0xFF	; 255
     4f4:	a8 f3       	brcs	.-22     	; 0x4e0 <usbCrcByteLoop>

000004f6 <usbCrcReady>:
     4f6:	08 95       	ret

000004f8 <usbCrc16Append>:
     4f8:	ea df       	rcall	.-44     	; 0x4ce <usbCrc16>
     4fa:	8d 93       	st	X+, r24
     4fc:	9d 93       	st	X+, r25
     4fe:	08 95       	ret

00000500 <__vector_1>:
     500:	cf 93       	push	r28
     502:	cf b7       	in	r28, 0x3f	; 63
     504:	cf 93       	push	r28
     506:	df 93       	push	r29

00000508 <waitForJ>:
     508:	c3 95       	inc	r28
     50a:	49 9b       	sbis	0x09, 1	; 9
     50c:	e9 f7       	brne	.-6      	; 0x508 <waitForJ>

0000050e <waitForK>:
     50e:	49 9b       	sbis	0x09, 1	; 9
     510:	0b c0       	rjmp	.+22     	; 0x528 <foundK>
     512:	49 9b       	sbis	0x09, 1	; 9
     514:	09 c0       	rjmp	.+18     	; 0x528 <foundK>
     516:	49 9b       	sbis	0x09, 1	; 9
     518:	07 c0       	rjmp	.+14     	; 0x528 <foundK>
     51a:	49 9b       	sbis	0x09, 1	; 9
     51c:	05 c0       	rjmp	.+10     	; 0x528 <foundK>
     51e:	49 9b       	sbis	0x09, 1	; 9
     520:	03 c0       	rjmp	.+6      	; 0x528 <foundK>
     522:	49 9b       	sbis	0x09, 1	; 9
     524:	01 c0       	rjmp	.+2      	; 0x528 <foundK>
     526:	8e c0       	rjmp	.+284    	; 0x644 <sofError>

00000528 <foundK>:
     528:	6f 93       	push	r22
     52a:	c0 91 b2 02 	lds	r28, 0x02B2
     52e:	dd 27       	eor	r29, r29
     530:	c7 54       	subi	r28, 0x47	; 71
     532:	dd 4f       	sbci	r29, 0xFD	; 253
     534:	2f 93       	push	r18
     536:	65 e5       	ldi	r22, 0x55	; 85
     538:	49 9b       	sbis	0x09, 1	; 9
     53a:	03 c0       	rjmp	.+6      	; 0x542 <haveTwoBitsK>
     53c:	2f 91       	pop	r18
     53e:	6f 91       	pop	r22
     540:	e6 cf       	rjmp	.-52     	; 0x50e <waitForK>

00000542 <haveTwoBitsK>:
     542:	0f 93       	push	r16
     544:	1f 93       	push	r17
     546:	4f 93       	push	r20
     548:	20 e0       	ldi	r18, 0x00	; 0
     54a:	40 e1       	ldi	r20, 0x10	; 16
     54c:	5f 93       	push	r21
     54e:	09 b1       	in	r16, 0x09	; 9
     550:	03 70       	andi	r16, 0x03	; 3
     552:	01 fb       	bst	r16, 1
     554:	27 f9       	bld	r18, 7
     556:	3f 93       	push	r19
     558:	50 e0       	ldi	r21, 0x00	; 0
     55a:	3b e0       	ldi	r19, 0x0B	; 11
     55c:	39 c0       	rjmp	.+114    	; 0x5d0 <rxbit1>

0000055e <unstuff6>:
     55e:	13 70       	andi	r17, 0x03	; 3
     560:	40 64       	ori	r20, 0x40	; 64
     562:	2f 77       	andi	r18, 0x7F	; 127
     564:	01 2f       	mov	r16, r17
     566:	5f 5f       	subi	r21, 0xFF	; 255
     568:	1e c0       	rjmp	.+60     	; 0x5a6 <didUnstuff6>

0000056a <unstuff7>:
     56a:	40 68       	ori	r20, 0x80	; 128
     56c:	19 b1       	in	r17, 0x09	; 9
     56e:	13 70       	andi	r17, 0x03	; 3
     570:	2f 77       	andi	r18, 0x7F	; 127
     572:	52 50       	subi	r21, 0x02	; 2
     574:	1f c0       	rjmp	.+62     	; 0x5b4 <didUnstuff7>

00000576 <unstuffEven>:
     576:	40 64       	ori	r20, 0x40	; 64
     578:	09 b1       	in	r16, 0x09	; 9
     57a:	2f 77       	andi	r18, 0x7F	; 127
     57c:	03 70       	andi	r16, 0x03	; 3
     57e:	d1 f1       	breq	.+116    	; 0x5f4 <se0>
     580:	5f 5f       	subi	r21, 0xFF	; 255
     582:	00 c0       	rjmp	.+0      	; 0x584 <unstuffEven+0xe>
     584:	23 c0       	rjmp	.+70     	; 0x5cc <didUnstuffE>

00000586 <unstuffOdd>:
     586:	40 62       	ori	r20, 0x20	; 32
     588:	19 b1       	in	r17, 0x09	; 9
     58a:	2f 77       	andi	r18, 0x7F	; 127
     58c:	13 70       	andi	r17, 0x03	; 3
     58e:	91 f1       	breq	.+100    	; 0x5f4 <se0>
     590:	5f 5f       	subi	r21, 0xFF	; 255
     592:	00 c0       	rjmp	.+0      	; 0x594 <unstuffOdd+0xe>
     594:	25 c0       	rjmp	.+74     	; 0x5e0 <didUnstuffO>

00000596 <rxByteLoop>:
     596:	03 70       	andi	r16, 0x03	; 3
     598:	10 27       	eor	r17, r16
     59a:	51 50       	subi	r21, 0x01	; 1
     59c:	12 f4       	brpl	.+4      	; 0x5a2 <skipLeap>
     59e:	5d 5f       	subi	r21, 0xFD	; 253
	...

000005a2 <skipLeap>:
     5a2:	11 50       	subi	r17, 0x01	; 1
     5a4:	27 95       	ror	r18

000005a6 <didUnstuff6>:
     5a6:	2c 3f       	cpi	r18, 0xFC	; 252
     5a8:	19 b1       	in	r17, 0x09	; 9
     5aa:	c8 f6       	brcc	.-78     	; 0x55e <unstuff6>
     5ac:	13 70       	andi	r17, 0x03	; 3
     5ae:	01 27       	eor	r16, r17
     5b0:	01 50       	subi	r16, 0x01	; 1
     5b2:	27 95       	ror	r18

000005b4 <didUnstuff7>:
     5b4:	2c 3f       	cpi	r18, 0xFC	; 252
     5b6:	c8 f6       	brcc	.-78     	; 0x56a <unstuff7>
     5b8:	42 27       	eor	r20, r18
     5ba:	49 93       	st	Y+, r20

000005bc <rxBitLoop>:
     5bc:	09 b1       	in	r16, 0x09	; 9
     5be:	03 70       	andi	r16, 0x03	; 3
     5c0:	10 27       	eor	r17, r16
     5c2:	4f 73       	andi	r20, 0x3F	; 63
     5c4:	11 50       	subi	r17, 0x01	; 1
     5c6:	27 95       	ror	r18
     5c8:	2c 3f       	cpi	r18, 0xFC	; 252
     5ca:	a8 f6       	brcc	.-86     	; 0x576 <unstuffEven>

000005cc <didUnstuffE>:
     5cc:	46 95       	lsr	r20
     5ce:	46 95       	lsr	r20

000005d0 <rxbit1>:
     5d0:	19 b1       	in	r17, 0x09	; 9
     5d2:	13 70       	andi	r17, 0x03	; 3
     5d4:	79 f0       	breq	.+30     	; 0x5f4 <se0>
     5d6:	01 27       	eor	r16, r17
     5d8:	01 50       	subi	r16, 0x01	; 1
     5da:	27 95       	ror	r18
     5dc:	2c 3f       	cpi	r18, 0xFC	; 252
     5de:	98 f6       	brcc	.-90     	; 0x586 <unstuffOdd>

000005e0 <didUnstuffO>:
     5e0:	6b 5a       	subi	r22, 0xAB	; 171
     5e2:	60 f3       	brcs	.-40     	; 0x5bc <rxBitLoop>
     5e4:	31 50       	subi	r19, 0x01	; 1
     5e6:	09 b1       	in	r16, 0x09	; 9
     5e8:	b0 f6       	brcc	.-84     	; 0x596 <rxByteLoop>
     5ea:	00 c0       	rjmp	.+0      	; 0x5ec <overflow>

000005ec <overflow>:
     5ec:	11 e0       	ldi	r17, 0x01	; 1
     5ee:	1c bb       	out	0x1c, r17	; 28

000005f0 <ignorePacket>:
     5f0:	00 27       	eor	r16, r16
     5f2:	1c c0       	rjmp	.+56     	; 0x62c <storeTokenAndReturn>

000005f4 <se0>:
     5f4:	3b 50       	subi	r19, 0x0B	; 11
     5f6:	31 95       	neg	r19
     5f8:	c3 1b       	sub	r28, r19
     5fa:	d0 40       	sbci	r29, 0x00	; 0
     5fc:	11 e0       	ldi	r17, 0x01	; 1
     5fe:	1c bb       	out	0x1c, r17	; 28
     600:	08 81       	ld	r16, Y
     602:	03 3c       	cpi	r16, 0xC3	; 195
     604:	21 f1       	breq	.+72     	; 0x64e <handleData>
     606:	0b 34       	cpi	r16, 0x4B	; 75
     608:	11 f1       	breq	.+68     	; 0x64e <handleData>
     60a:	20 91 b0 02 	lds	r18, 0x02B0
     60e:	19 81       	ldd	r17, Y+1	; 0x01
     610:	11 0f       	add	r17, r17
     612:	12 13       	cpse	r17, r18
     614:	ed cf       	rjmp	.-38     	; 0x5f0 <ignorePacket>
     616:	4a 81       	ldd	r20, Y+2	; 0x02
     618:	44 1f       	adc	r20, r20
     61a:	09 36       	cpi	r16, 0x69	; 105
     61c:	69 f1       	breq	.+90     	; 0x678 <handleIn>
     61e:	0d 32       	cpi	r16, 0x2D	; 45
     620:	11 f0       	breq	.+4      	; 0x626 <handleSetupOrOut>
     622:	01 3e       	cpi	r16, 0xE1	; 225
     624:	29 f7       	brne	.-54     	; 0x5f0 <ignorePacket>

00000626 <handleSetupOrOut>:
     626:	4f 70       	andi	r20, 0x0F	; 15
     628:	09 f0       	breq	.+2      	; 0x62c <storeTokenAndReturn>
     62a:	04 2f       	mov	r16, r20

0000062c <storeTokenAndReturn>:
     62c:	00 93 b7 02 	sts	0x02B7, r16

00000630 <doReturn>:
     630:	3f 91       	pop	r19
     632:	5f 91       	pop	r21
     634:	4f 91       	pop	r20
     636:	1f 91       	pop	r17
     638:	0f 91       	pop	r16
     63a:	2f 91       	pop	r18
     63c:	6f 91       	pop	r22
     63e:	cc b3       	in	r28, 0x1c	; 28
     640:	c0 fd       	sbrc	r28, 0
     642:	62 cf       	rjmp	.-316    	; 0x508 <waitForJ>

00000644 <sofError>:
     644:	df 91       	pop	r29
     646:	cf 91       	pop	r28
     648:	cf bf       	out	0x3f, r28	; 63
     64a:	cf 91       	pop	r28
     64c:	18 95       	reti

0000064e <handleData>:
     64e:	20 91 b7 02 	lds	r18, 0x02B7
     652:	22 23       	and	r18, r18
     654:	69 f3       	breq	.-38     	; 0x630 <doReturn>
     656:	10 91 b5 02 	lds	r17, 0x02B5
     65a:	11 23       	and	r17, r17
     65c:	91 f5       	brne	.+100    	; 0x6c2 <sendNakAndReti>
     65e:	34 30       	cpi	r19, 0x04	; 4
     660:	92 f1       	brmi	.+100    	; 0x6c6 <sendAckAndReti>
     662:	30 93 b5 02 	sts	0x02B5, r19
     666:	20 93 b1 02 	sts	0x02B1, r18
     66a:	10 91 b2 02 	lds	r17, 0x02B2
     66e:	3b e0       	ldi	r19, 0x0B	; 11
     670:	31 1b       	sub	r19, r17
     672:	30 93 b2 02 	sts	0x02B2, r19
     676:	27 c0       	rjmp	.+78     	; 0x6c6 <sendAckAndReti>

00000678 <handleIn>:
     678:	00 91 b5 02 	lds	r16, 0x02B5
     67c:	01 30       	cpi	r16, 0x01	; 1
     67e:	0c f5       	brge	.+66     	; 0x6c2 <sendNakAndReti>
     680:	0a e5       	ldi	r16, 0x5A	; 90
     682:	4f 70       	andi	r20, 0x0F	; 15
     684:	49 f4       	brne	.+18     	; 0x698 <handleIn1>
     686:	30 91 00 02 	lds	r19, 0x0200
     68a:	34 fd       	sbrc	r19, 4
     68c:	1d c0       	rjmp	.+58     	; 0x6c8 <sendCntAndReti>
     68e:	00 93 00 02 	sts	0x0200, r16
     692:	c9 e9       	ldi	r28, 0x99	; 153
     694:	d2 e0       	ldi	r29, 0x02	; 2
     696:	1c c0       	rjmp	.+56     	; 0x6d0 <usbSendAndReti>

00000698 <handleIn1>:
     698:	30 91 a4 02 	lds	r19, 0x02A4
     69c:	34 fd       	sbrc	r19, 4
     69e:	14 c0       	rjmp	.+40     	; 0x6c8 <sendCntAndReti>
     6a0:	00 93 a4 02 	sts	0x02A4, r16
     6a4:	c5 ea       	ldi	r28, 0xA5	; 165
     6a6:	d2 e0       	ldi	r29, 0x02	; 2
     6a8:	13 c0       	rjmp	.+38     	; 0x6d0 <usbSendAndReti>

000006aa <bitstuffN>:
     6aa:	05 27       	eor	r16, r21
     6ac:	10 e0       	ldi	r17, 0x00	; 0
     6ae:	00 c0       	rjmp	.+0      	; 0x6b0 <bitstuffN+0x6>
     6b0:	00 00       	nop
     6b2:	0b b9       	out	0x0b, r16	; 11
     6b4:	1a c0       	rjmp	.+52     	; 0x6ea <didStuffN>

000006b6 <bitstuff6>:
     6b6:	05 27       	eor	r16, r21
     6b8:	10 e0       	ldi	r17, 0x00	; 0
     6ba:	22 1f       	adc	r18, r18
     6bc:	1d c0       	rjmp	.+58     	; 0x6f8 <didStuff6>

000006be <bitstuff7>:
     6be:	10 e0       	ldi	r17, 0x00	; 0
     6c0:	21 c0       	rjmp	.+66     	; 0x704 <didStuff7>

000006c2 <sendNakAndReti>:
     6c2:	4a e5       	ldi	r20, 0x5A	; 90
     6c4:	02 c0       	rjmp	.+4      	; 0x6ca <sendX3AndReti>

000006c6 <sendAckAndReti>:
     6c6:	32 ed       	ldi	r19, 0xD2	; 210

000006c8 <sendCntAndReti>:
     6c8:	43 2f       	mov	r20, r19

000006ca <sendX3AndReti>:
     6ca:	c4 e1       	ldi	r28, 0x14	; 20
     6cc:	d0 e0       	ldi	r29, 0x00	; 0
     6ce:	32 e0       	ldi	r19, 0x02	; 2

000006d0 <usbSendAndReti>:
     6d0:	1a b1       	in	r17, 0x0a	; 10
     6d2:	13 60       	ori	r17, 0x03	; 3
     6d4:	59 9a       	sbi	0x0b, 1	; 11
     6d6:	0b b1       	in	r16, 0x0b	; 11
     6d8:	1a b9       	out	0x0a, r17	; 10
     6da:	53 e0       	ldi	r21, 0x03	; 3
     6dc:	20 e8       	ldi	r18, 0x80	; 128

000006de <txByteLoop>:
     6de:	65 e3       	ldi	r22, 0x35	; 53

000006e0 <txBitLoop>:
     6e0:	20 ff       	sbrs	r18, 0
     6e2:	05 27       	eor	r16, r21
     6e4:	0b b9       	out	0x0b, r16	; 11
     6e6:	27 95       	ror	r18
     6e8:	17 95       	ror	r17

000006ea <didStuffN>:
     6ea:	1c 3f       	cpi	r17, 0xFC	; 252
     6ec:	f0 f6       	brcc	.-68     	; 0x6aa <bitstuffN>
     6ee:	66 95       	lsr	r22
     6f0:	b8 f7       	brcc	.-18     	; 0x6e0 <txBitLoop>
     6f2:	b1 f7       	brne	.-20     	; 0x6e0 <txBitLoop>
     6f4:	20 ff       	sbrs	r18, 0
     6f6:	05 27       	eor	r16, r21

000006f8 <didStuff6>:
     6f8:	0b b9       	out	0x0b, r16	; 11
     6fa:	27 95       	ror	r18
     6fc:	17 95       	ror	r17
     6fe:	1c 3f       	cpi	r17, 0xFC	; 252
     700:	d0 f6       	brcc	.-76     	; 0x6b6 <bitstuff6>
     702:	27 95       	ror	r18

00000704 <didStuff7>:
     704:	17 95       	ror	r17
     706:	17 ff       	sbrs	r17, 7
     708:	05 27       	eor	r16, r21
     70a:	00 00       	nop
     70c:	1c 3f       	cpi	r17, 0xFC	; 252
     70e:	0b b9       	out	0x0b, r16	; 11
     710:	b0 f6       	brcc	.-84     	; 0x6be <bitstuff7>
     712:	29 91       	ld	r18, Y+
     714:	3a 95       	dec	r19
     716:	19 f7       	brne	.-58     	; 0x6de <txByteLoop>
     718:	0c 7f       	andi	r16, 0xFC	; 252
     71a:	10 91 b6 02 	lds	r17, 0x02B6
     71e:	11 0f       	add	r17, r17
     720:	c6 51       	subi	r28, 0x16	; 22
     722:	d0 40       	sbci	r29, 0x00	; 0
     724:	0b b9       	out	0x0b, r16	; 11
     726:	11 f0       	breq	.+4      	; 0x72c <skipAddrAssign>
     728:	10 93 b0 02 	sts	0x02B0, r17

0000072c <skipAddrAssign>:
     72c:	11 e0       	ldi	r17, 0x01	; 1
     72e:	1c bb       	out	0x1c, r17	; 28
     730:	02 60       	ori	r16, 0x02	; 2
     732:	1a b1       	in	r17, 0x0a	; 10
     734:	1c 7f       	andi	r17, 0xFC	; 252
     736:	40 2f       	mov	r20, r16
     738:	4c 7f       	andi	r20, 0xFC	; 252
     73a:	54 e0       	ldi	r21, 0x04	; 4

0000073c <se0Delay>:
     73c:	5a 95       	dec	r21
     73e:	f1 f7       	brne	.-4      	; 0x73c <se0Delay>
     740:	0b b9       	out	0x0b, r16	; 11
     742:	1a b9       	out	0x0a, r17	; 10
     744:	4b b9       	out	0x0b, r20	; 11
     746:	74 cf       	rjmp	.-280    	; 0x630 <doReturn>

00000748 <adc_get>:
}


/** For doing an ADC measurement */
static inline uint16_t adc_get(void){
    ADCSRA |= (1<<ADSC);
     748:	80 91 7a 00 	lds	r24, 0x007A
     74c:	80 64       	ori	r24, 0x40	; 64
     74e:	80 93 7a 00 	sts	0x007A, r24
    while(!(ADCSRA & (1<<ADIF)));
     752:	80 91 7a 00 	lds	r24, 0x007A
     756:	84 ff       	sbrs	r24, 4
     758:	fc cf       	rjmp	.-8      	; 0x752 <adc_get+0xa>
    ADCSRA |= (1<<ADIF);
     75a:	80 91 7a 00 	lds	r24, 0x007A
     75e:	80 61       	ori	r24, 0x10	; 16
     760:	80 93 7a 00 	sts	0x007A, r24
    return ADC;
     764:	20 91 78 00 	lds	r18, 0x0078
     768:	30 91 79 00 	lds	r19, 0x0079
}
     76c:	c9 01       	movw	r24, r18
     76e:	08 95       	ret

00000770 <touch_init>:

void touch_init(void){
    ADMUX  |= (1<<REFS0); //reference AVCC (5v)
     770:	ec e7       	ldi	r30, 0x7C	; 124
     772:	f0 e0       	ldi	r31, 0x00	; 0
     774:	80 81       	ld	r24, Z
     776:	80 64       	ori	r24, 0x40	; 64
     778:	80 83       	st	Z, r24

    ADCSRA |= (1<<ADPS2)|(1<<ADPS1); //clockiv 64
     77a:	ea e7       	ldi	r30, 0x7A	; 122
     77c:	f0 e0       	ldi	r31, 0x00	; 0
     77e:	80 81       	ld	r24, Z
     780:	86 60       	ori	r24, 0x06	; 6
     782:	80 83       	st	Z, r24
    //final clock 8MHz/64 = 125kHz
    
    ADCSRA |= (1<<ADEN); //enable ADC
     784:	80 81       	ld	r24, Z
     786:	80 68       	ori	r24, 0x80	; 128
     788:	80 83       	st	Z, r24
}
     78a:	08 95       	ret

0000078c <touch_measure>:


uint16_t touch_measure(touch_channel_t *channel){
     78c:	ff 92       	push	r15
     78e:	0f 93       	push	r16
     790:	1f 93       	push	r17
     792:	cf 93       	push	r28
     794:	df 93       	push	r29
     796:	ec 01       	movw	r28, r24
     798:	94 e0       	ldi	r25, 0x04	; 4
     79a:	f9 2e       	mov	r15, r25
    uint8_t i;
    uint16_t retval;

    retval = 0;
     79c:	00 e0       	ldi	r16, 0x00	; 0
     79e:	10 e0       	ldi	r17, 0x00	; 0


    //Do four measurements and average, just to smooth things out
    for (i=0 ; i<4 ; i++){
        *(channel->port) |= channel->portmask;    // set pullup on
     7a0:	e8 81       	ld	r30, Y
     7a2:	f9 81       	ldd	r31, Y+1	; 0x01
     7a4:	80 81       	ld	r24, Z
     7a6:	9a 81       	ldd	r25, Y+2	; 0x02
     7a8:	89 2b       	or	r24, r25
     7aa:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7ac:	8f e1       	ldi	r24, 0x1F	; 31
     7ae:	93 e0       	ldi	r25, 0x03	; 3
     7b0:	01 97       	sbiw	r24, 0x01	; 1
     7b2:	f1 f7       	brne	.-4      	; 0x7b0 <touch_measure+0x24>
     7b4:	00 c0       	rjmp	.+0      	; 0x7b6 <touch_measure+0x2a>
     7b6:	00 00       	nop
        _delay_us(200); // higher more stable but watch for v-usb
        *(channel->port) &= ~(channel->portmask); // set pullup off
     7b8:	e8 81       	ld	r30, Y
     7ba:	f9 81       	ldd	r31, Y+1	; 0x01
     7bc:	90 81       	ld	r25, Z
     7be:	8a 81       	ldd	r24, Y+2	; 0x02
     7c0:	80 95       	com	r24
     7c2:	89 23       	and	r24, r25
     7c4:	80 83       	st	Z, r24
		ADMUX = (ADMUX & 0xe0) | channel;
	}
}

static inline void adc_channel_ground(uint8_t channel){
    ADMUX &= ~(0b11111);
     7c6:	80 91 7c 00 	lds	r24, 0x007C
     7ca:	80 7e       	andi	r24, 0xE0	; 224
     7cc:	80 93 7c 00 	sts	0x007C, r24
    ADMUX |=   0b11111 & channel;
     7d0:	80 91 7c 00 	lds	r24, 0x007C
     7d4:	8f 61       	ori	r24, 0x1F	; 31
     7d6:	80 93 7c 00 	sts	0x007C, r24
        *(channel->port) |= channel->portmask;    // set pullup on
        _delay_us(200); // higher more stable but watch for v-usb
        *(channel->port) &= ~(channel->portmask); // set pullup off

        adc_channel_ground(0b11111); //set ADC mux to ground;
        adc_get();            //do a measurement (to discharge the sampling cap)
     7da:	0e 94 a4 03 	call	0x748	; 0x748 <adc_get>

        adc_channel(channel->mux); //set mux to right channel
     7de:	9b 81       	ldd	r25, Y+3	; 0x03
static inline void adc_channel(uint8_t channel){
    /*
    ADMUX &= ~(0b11111);
    ADMUX |=   0b11111 & channel;
    */
    if (channel > 7) {
     7e0:	98 30       	cpi	r25, 0x08	; 8
     7e2:	68 f0       	brcs	.+26     	; 0x7fe <touch_measure+0x72>
		ADCSRB |= _BV(MUX5);
     7e4:	80 91 7b 00 	lds	r24, 0x007B
     7e8:	88 60       	ori	r24, 0x08	; 8
     7ea:	80 93 7b 00 	sts	0x007B, r24
		ADMUX = (ADMUX & 0xe0) | (channel - 8);
     7ee:	80 91 7c 00 	lds	r24, 0x007C
     7f2:	98 50       	subi	r25, 0x08	; 8
     7f4:	80 7e       	andi	r24, 0xE0	; 224
     7f6:	98 2b       	or	r25, r24
     7f8:	90 93 7c 00 	sts	0x007C, r25
     7fc:	0b c0       	rjmp	.+22     	; 0x814 <touch_measure+0x88>
	} else {
		ADCSRB &= ~(_BV(MUX5));
     7fe:	80 91 7b 00 	lds	r24, 0x007B
     802:	87 7f       	andi	r24, 0xF7	; 247
     804:	80 93 7b 00 	sts	0x007B, r24
		ADMUX = (ADMUX & 0xe0) | channel;
     808:	80 91 7c 00 	lds	r24, 0x007C
     80c:	80 7e       	andi	r24, 0xE0	; 224
     80e:	89 2b       	or	r24, r25
     810:	80 93 7c 00 	sts	0x007C, r24

        adc_channel_ground(0b11111); //set ADC mux to ground;
        adc_get();            //do a measurement (to discharge the sampling cap)

        adc_channel(channel->mux); //set mux to right channel
        retval +=  adc_get();
     814:	0e 94 a4 03 	call	0x748	; 0x748 <adc_get>
     818:	08 0f       	add	r16, r24
     81a:	19 1f       	adc	r17, r25
     81c:	fa 94       	dec	r15

    retval = 0;


    //Do four measurements and average, just to smooth things out
    for (i=0 ; i<4 ; i++){
     81e:	09 f0       	breq	.+2      	; 0x822 <touch_measure+0x96>
     820:	bf cf       	rjmp	.-130    	; 0x7a0 <touch_measure+0x14>
        adc_get();            //do a measurement (to discharge the sampling cap)

        adc_channel(channel->mux); //set mux to right channel
        retval +=  adc_get();
    }
    retval /= 4;
     822:	16 95       	lsr	r17
     824:	07 95       	ror	r16
     826:	16 95       	lsr	r17
     828:	07 95       	ror	r16

    if (retval < channel->min)
     82a:	8c 81       	ldd	r24, Y+4	; 0x04
     82c:	9d 81       	ldd	r25, Y+5	; 0x05
     82e:	08 17       	cp	r16, r24
     830:	19 07       	cpc	r17, r25
     832:	a8 f0       	brcs	.+42     	; 0x85e <touch_measure+0xd2>
        return 0;

    if (retval > channel->max)
     834:	6e 81       	ldd	r22, Y+6	; 0x06
     836:	7f 81       	ldd	r23, Y+7	; 0x07
     838:	60 17       	cp	r22, r16
     83a:	71 07       	cpc	r23, r17
     83c:	98 f0       	brcs	.+38     	; 0x864 <touch_measure+0xd8>

    if (retval > channel->max)
        channel->max = retval;
        */

    retval = (retval - channel->min) * (0x7FFF/(channel->max - channel->min));
     83e:	08 1b       	sub	r16, r24
     840:	19 0b       	sbc	r17, r25
     842:	68 1b       	sub	r22, r24
     844:	79 0b       	sbc	r23, r25
     846:	8f ef       	ldi	r24, 0xFF	; 255
     848:	9f e7       	ldi	r25, 0x7F	; 127
     84a:	0e 94 da 09 	call	0x13b4	; 0x13b4 <__udivmodhi4>
     84e:	06 9f       	mul	r16, r22
     850:	90 01       	movw	r18, r0
     852:	07 9f       	mul	r16, r23
     854:	30 0d       	add	r19, r0
     856:	16 9f       	mul	r17, r22
     858:	30 0d       	add	r19, r0
     85a:	11 24       	eor	r1, r1

    return retval;
     85c:	05 c0       	rjmp	.+10     	; 0x868 <touch_measure+0xdc>
        retval +=  adc_get();
    }
    retval /= 4;

    if (retval < channel->min)
        return 0;
     85e:	20 e0       	ldi	r18, 0x00	; 0
     860:	30 e0       	ldi	r19, 0x00	; 0
     862:	02 c0       	rjmp	.+4      	; 0x868 <touch_measure+0xdc>

    if (retval > channel->max)
        return 0x7FFF;
     864:	2f ef       	ldi	r18, 0xFF	; 255
     866:	3f e7       	ldi	r19, 0x7F	; 127
        */

    retval = (retval - channel->min) * (0x7FFF/(channel->max - channel->min));

    return retval;
}
     868:	c9 01       	movw	r24, r18
     86a:	df 91       	pop	r29
     86c:	cf 91       	pop	r28
     86e:	1f 91       	pop	r17
     870:	0f 91       	pop	r16
     872:	ff 90       	pop	r15
     874:	08 95       	ret

00000876 <adc_read>:
void (*_adc_handler)(uint8_t pin, uint16_t);
volatile uint8_t _adc_pin_qty;

uint16_t adc_read(uint8_t prescaler, uint8_t vref, uint8_t pin) {
#ifdef MUX5
	if (pin > 7) {
     876:	48 30       	cpi	r20, 0x08	; 8
     878:	50 f0       	brcs	.+20     	; 0x88e <adc_read+0x18>
		ADCSRB |= _BV(MUX5);
     87a:	90 91 7b 00 	lds	r25, 0x007B
     87e:	98 60       	ori	r25, 0x08	; 8
     880:	90 93 7b 00 	sts	0x007B, r25
		ADMUX = vref | (pin - 8);
     884:	48 50       	subi	r20, 0x08	; 8
     886:	46 2b       	or	r20, r22
     888:	40 93 7c 00 	sts	0x007C, r20
     88c:	08 c0       	rjmp	.+16     	; 0x89e <adc_read+0x28>
	} else {
		ADCSRB &= ~(_BV(MUX5));
     88e:	90 91 7b 00 	lds	r25, 0x007B
     892:	97 7f       	andi	r25, 0xF7	; 247
     894:	90 93 7b 00 	sts	0x007B, r25
		ADMUX = vref | pin;
     898:	64 2b       	or	r22, r20
     89a:	60 93 7c 00 	sts	0x007C, r22
	}
#else
	ADMUX = vref | pin;
#endif
	
	ADCSRA = _BV(ADEN) | _BV(ADSC) | prescaler;
     89e:	80 6c       	ori	r24, 0xC0	; 192
     8a0:	80 93 7a 00 	sts	0x007A, r24
	while(!(ADCSRA & _BV(ADIF)));
     8a4:	80 91 7a 00 	lds	r24, 0x007A
     8a8:	84 ff       	sbrs	r24, 4
     8aa:	fc cf       	rjmp	.-8      	; 0x8a4 <adc_read+0x2e>
	
	return (ADCL | (ADCH<<8));
     8ac:	20 91 78 00 	lds	r18, 0x0078
     8b0:	30 91 79 00 	lds	r19, 0x0079
     8b4:	93 2f       	mov	r25, r19
     8b6:	80 e0       	ldi	r24, 0x00	; 0
     8b8:	30 e0       	ldi	r19, 0x00	; 0
     8ba:	28 2b       	or	r18, r24
     8bc:	39 2b       	or	r19, r25
}
     8be:	c9 01       	movw	r24, r18
     8c0:	08 95       	ret

000008c2 <adc_start>:

void adc_start(uint8_t prescaler, uint8_t vref, uint8_t pin_qty, void (*handler)(uint8_t, uint16_t)) {
	_adc_handler = handler;
     8c2:	30 93 d1 02 	sts	0x02D1, r19
     8c6:	20 93 d0 02 	sts	0x02D0, r18
	_adc_pin_qty = pin_qty;
     8ca:	40 93 cf 02 	sts	0x02CF, r20
	ADMUX = vref;
     8ce:	60 93 7c 00 	sts	0x007C, r22
#ifdef MUX5
	ADCSRB &= ~(_BV(MUX5));
     8d2:	eb e7       	ldi	r30, 0x7B	; 123
     8d4:	f0 e0       	ldi	r31, 0x00	; 0
     8d6:	90 81       	ld	r25, Z
     8d8:	97 7f       	andi	r25, 0xF7	; 247
     8da:	90 83       	st	Z, r25
#endif
	ADCSRA = _BV(ADEN) | _BV(ADSC) | _BV(ADIE) | prescaler;
     8dc:	88 6c       	ori	r24, 0xC8	; 200
     8de:	80 93 7a 00 	sts	0x007A, r24
}
     8e2:	08 95       	ret

000008e4 <adc_stop>:

void adc_stop() {
	ADCSRA = 0;
     8e4:	10 92 7a 00 	sts	0x007A, r1
}
     8e8:	08 95       	ret

000008ea <__vector_29>:

#ifdef ENABLE_ADC_INT
ISR(ADC_vect) {
     8ea:	1f 92       	push	r1
     8ec:	0f 92       	push	r0
     8ee:	0f b6       	in	r0, 0x3f	; 63
     8f0:	0f 92       	push	r0
     8f2:	11 24       	eor	r1, r1
     8f4:	2f 93       	push	r18
     8f6:	3f 93       	push	r19
     8f8:	4f 93       	push	r20
     8fa:	5f 93       	push	r21
     8fc:	6f 93       	push	r22
     8fe:	7f 93       	push	r23
     900:	8f 93       	push	r24
     902:	9f 93       	push	r25
     904:	af 93       	push	r26
     906:	bf 93       	push	r27
     908:	ef 93       	push	r30
     90a:	ff 93       	push	r31
	static uint8_t cur_pin = 0;
	
	_adc_handler(cur_pin, ADCL | (ADCH<<8));
     90c:	60 91 78 00 	lds	r22, 0x0078
     910:	20 91 79 00 	lds	r18, 0x0079
     914:	92 2f       	mov	r25, r18
     916:	80 e0       	ldi	r24, 0x00	; 0
     918:	70 e0       	ldi	r23, 0x00	; 0
     91a:	68 2b       	or	r22, r24
     91c:	79 2b       	or	r23, r25
     91e:	e0 91 d0 02 	lds	r30, 0x02D0
     922:	f0 91 d1 02 	lds	r31, 0x02D1
     926:	80 91 7d 02 	lds	r24, 0x027D
     92a:	09 95       	icall

	cur_pin++;
     92c:	80 91 7d 02 	lds	r24, 0x027D
     930:	8f 5f       	subi	r24, 0xFF	; 255
     932:	80 93 7d 02 	sts	0x027D, r24
	if (cur_pin >= _adc_pin_qty)
     936:	90 91 cf 02 	lds	r25, 0x02CF
     93a:	89 17       	cp	r24, r25
     93c:	10 f0       	brcs	.+4      	; 0x942 <__vector_29+0x58>
		cur_pin = 0;
     93e:	10 92 7d 02 	sts	0x027D, r1
	
#ifdef MUX5
	if (cur_pin > 7) {
     942:	90 91 7d 02 	lds	r25, 0x027D
     946:	98 30       	cpi	r25, 0x08	; 8
     948:	68 f0       	brcs	.+26     	; 0x964 <__vector_29+0x7a>
		ADCSRB |= _BV(MUX5);
     94a:	80 91 7b 00 	lds	r24, 0x007B
     94e:	88 60       	ori	r24, 0x08	; 8
     950:	80 93 7b 00 	sts	0x007B, r24
		ADMUX = (ADMUX & 0xe0) | (cur_pin - 8);
     954:	80 91 7c 00 	lds	r24, 0x007C
     958:	98 50       	subi	r25, 0x08	; 8
     95a:	80 7e       	andi	r24, 0xE0	; 224
     95c:	98 2b       	or	r25, r24
     95e:	90 93 7c 00 	sts	0x007C, r25
     962:	0b c0       	rjmp	.+22     	; 0x97a <__vector_29+0x90>
	} else {
		ADCSRB &= ~(_BV(MUX5));
     964:	80 91 7b 00 	lds	r24, 0x007B
     968:	87 7f       	andi	r24, 0xF7	; 247
     96a:	80 93 7b 00 	sts	0x007B, r24
		ADMUX = (ADMUX & 0xe0) | cur_pin;
     96e:	80 91 7c 00 	lds	r24, 0x007C
     972:	80 7e       	andi	r24, 0xE0	; 224
     974:	89 2b       	or	r24, r25
     976:	80 93 7c 00 	sts	0x007C, r24
	}
#else
	ADMUX = (ADMUX & 0xe0) | cur_pin;
#endif

	ADCSRA |= _BV(ADSC);
     97a:	80 91 7a 00 	lds	r24, 0x007A
     97e:	80 64       	ori	r24, 0x40	; 64
     980:	80 93 7a 00 	sts	0x007A, r24
}
     984:	ff 91       	pop	r31
     986:	ef 91       	pop	r30
     988:	bf 91       	pop	r27
     98a:	af 91       	pop	r26
     98c:	9f 91       	pop	r25
     98e:	8f 91       	pop	r24
     990:	7f 91       	pop	r23
     992:	6f 91       	pop	r22
     994:	5f 91       	pop	r21
     996:	4f 91       	pop	r20
     998:	3f 91       	pop	r19
     99a:	2f 91       	pop	r18
     99c:	0f 90       	pop	r0
     99e:	0f be       	out	0x3f, r0	; 63
     9a0:	0f 90       	pop	r0
     9a2:	1f 90       	pop	r1
     9a4:	18 95       	reti

000009a6 <IOConf>:
// IO CONFIGURATION
////////////////////////////////////////////////////////////////////////
void IOConf()
{
	// PWM / MOSFET - output
	DDRB = 0xFF;
     9a6:	8f ef       	ldi	r24, 0xFF	; 255
     9a8:	84 b9       	out	0x04, r24	; 4
	DDRH = 0xFF;
     9aa:	80 93 01 01 	sts	0x0101, r24
	DDRE = 0xFF;
     9ae:	8d b9       	out	0x0d, r24	; 13
	
	// LED - output
	DDRJ = 0xFF;
     9b0:	80 93 04 01 	sts	0x0104, r24
	DDRC = 0xFF;
     9b4:	87 b9       	out	0x07, r24	; 7
	
	// SWITCH - input
	DDRL = 0x00;
     9b6:	10 92 0a 01 	sts	0x010A, r1
	PORTL = 0xFF; // pull-up enable
     9ba:	80 93 0b 01 	sts	0x010B, r24
	
	// ANALOG - input
	DDRF = 0x00;
     9be:	10 ba       	out	0x10, r1	; 16
	DDRK = 0x00;
     9c0:	10 92 07 01 	sts	0x0107, r1
}
     9c4:	08 95       	ret

000009c6 <timerCC_init>:

////////////////////////////////////////////////////////////////////////
// VHS - CC throttle
////////////////////////////////////////////////////////////////////////
void timerCC_init() {
	TCCR0A |= (1<<WGM01);
     9c6:	84 b5       	in	r24, 0x24	; 36
     9c8:	82 60       	ori	r24, 0x02	; 2
     9ca:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1<<CS02) | (1<<CS00);
     9cc:	85 b5       	in	r24, 0x25	; 37
     9ce:	85 60       	ori	r24, 0x05	; 5
     9d0:	85 bd       	out	0x25, r24	; 37
	OCR0A = 255;
     9d2:	8f ef       	ldi	r24, 0xFF	; 255
     9d4:	87 bd       	out	0x27, r24	; 39
	TIMSK0 |= (1 << OCIE0A); // enable compare interrupt
     9d6:	ee e6       	ldi	r30, 0x6E	; 110
     9d8:	f0 e0       	ldi	r31, 0x00	; 0
     9da:	80 81       	ld	r24, Z
     9dc:	82 60       	ori	r24, 0x02	; 2
     9de:	80 83       	st	Z, r24
}
     9e0:	08 95       	ret

000009e2 <__vector_21>:

ISR (TIMER0_COMPA_vect) {
     9e2:	1f 92       	push	r1
     9e4:	0f 92       	push	r0
     9e6:	0f b6       	in	r0, 0x3f	; 63
     9e8:	0f 92       	push	r0
     9ea:	11 24       	eor	r1, r1
     9ec:	8f 93       	push	r24
	sendCC = 1;
     9ee:	81 e0       	ldi	r24, 0x01	; 1
     9f0:	80 93 7e 02 	sts	0x027E, r24
}
     9f4:	8f 91       	pop	r24
     9f6:	0f 90       	pop	r0
     9f8:	0f be       	out	0x3f, r0	; 63
     9fa:	0f 90       	pop	r0
     9fc:	1f 90       	pop	r1
     9fe:	18 95       	reti

00000a00 <timerPWM_init>:
////////////////////////////////////////////////////////////////////////
// PWM SOFTWARE
// see this thread: http://www.electro-tech-online.com/threads/12-simultaneous-unique-frequencies-pwm.140532
////////////////////////////////////////////////////////////////////////
void timerPWM_init() {
	TCCR2A |= (1<<WGM21);
     a00:	e0 eb       	ldi	r30, 0xB0	; 176
     a02:	f0 e0       	ldi	r31, 0x00	; 0
     a04:	80 81       	ld	r24, Z
     a06:	82 60       	ori	r24, 0x02	; 2
     a08:	80 83       	st	Z, r24
	TCCR2B |= (1<<CS21);
     a0a:	e1 eb       	ldi	r30, 0xB1	; 177
     a0c:	f0 e0       	ldi	r31, 0x00	; 0
     a0e:	80 81       	ld	r24, Z
     a10:	82 60       	ori	r24, 0x02	; 2
     a12:	80 83       	st	Z, r24
	OCR2A = 180; // 11098hz (cannot run lower because of V-USB)
     a14:	84 eb       	ldi	r24, 0xB4	; 180
     a16:	80 93 b3 00 	sts	0x00B3, r24
	TIMSK2 |= (1 << OCIE2A); // enable compare interrupt
     a1a:	e0 e7       	ldi	r30, 0x70	; 112
     a1c:	f0 e0       	ldi	r31, 0x00	; 0
     a1e:	80 81       	ld	r24, Z
     a20:	82 60       	ori	r24, 0x02	; 2
     a22:	80 83       	st	Z, r24
}
     a24:	08 95       	ret

00000a26 <pwm_init>:

void pwm_init() {
     a26:	e4 ed       	ldi	r30, 0xD4	; 212
     a28:	f2 e0       	ldi	r31, 0x02	; 2
  unsigned int i;
  unsigned int mask;
  for (i = 0; i < ASIZE; i++) {
    x[i] = 0;
     a2a:	11 92       	st	Z+, r1
     a2c:	11 92       	st	Z+, r1
}

void pwm_init() {
  unsigned int i;
  unsigned int mask;
  for (i = 0; i < ASIZE; i++) {
     a2e:	22 e1       	ldi	r18, 0x12	; 18
     a30:	e4 3d       	cpi	r30, 0xD4	; 212
     a32:	f2 07       	cpc	r31, r18
     a34:	d1 f7       	brne	.-12     	; 0xa2a <pwm_init+0x4>
     a36:	a2 e0       	ldi	r26, 0x02	; 2
     a38:	b2 e0       	ldi	r27, 0x02	; 2
	TCCR2B |= (1<<CS21);
	OCR2A = 180; // 11098hz (cannot run lower because of V-USB)
	TIMSK2 |= (1 << OCIE2A); // enable compare interrupt
}

void pwm_init() {
     a3a:	81 e0       	ldi	r24, 0x01	; 1
     a3c:	90 e0       	ldi	r25, 0x00	; 0
  for (i = 0; i < ASIZE; i++) {
    x[i] = 0;
  }
  mask = 1;
  for (i = 0; i < 12; i++) {
    x[f[i]] |= mask;
     a3e:	ed 91       	ld	r30, X+
     a40:	fd 91       	ld	r31, X+
     a42:	ee 0f       	add	r30, r30
     a44:	ff 1f       	adc	r31, r31
     a46:	ec 52       	subi	r30, 0x2C	; 44
     a48:	fd 4f       	sbci	r31, 0xFD	; 253
     a4a:	20 81       	ld	r18, Z
     a4c:	31 81       	ldd	r19, Z+1	; 0x01
     a4e:	28 2b       	or	r18, r24
     a50:	39 2b       	or	r19, r25
     a52:	31 83       	std	Z+1, r19	; 0x01
     a54:	20 83       	st	Z, r18
    mask <<= 1;
     a56:	88 0f       	add	r24, r24
     a58:	99 1f       	adc	r25, r25
  unsigned int mask;
  for (i = 0; i < ASIZE; i++) {
    x[i] = 0;
  }
  mask = 1;
  for (i = 0; i < 12; i++) {
     a5a:	22 e0       	ldi	r18, 0x02	; 2
     a5c:	aa 31       	cpi	r26, 0x1A	; 26
     a5e:	b2 07       	cpc	r27, r18
     a60:	71 f7       	brne	.-36     	; 0xa3e <pwm_init+0x18>
    x[f[i]] |= mask;
    mask <<= 1;
  }
  p = 0;
     a62:	10 92 d3 02 	sts	0x02D3, r1
     a66:	10 92 d2 02 	sts	0x02D2, r1
}
     a6a:	08 95       	ret

00000a6c <__vector_13>:

ISR (TIMER2_COMPA_vect) {
     a6c:	1f 92       	push	r1
     a6e:	0f 92       	push	r0
     a70:	0f b6       	in	r0, 0x3f	; 63
     a72:	0f 92       	push	r0
     a74:	11 24       	eor	r1, r1
     a76:	0f 93       	push	r16
     a78:	1f 93       	push	r17
     a7a:	2f 93       	push	r18
     a7c:	3f 93       	push	r19
     a7e:	4f 93       	push	r20
     a80:	5f 93       	push	r21
     a82:	6f 93       	push	r22
     a84:	7f 93       	push	r23
     a86:	8f 93       	push	r24
     a88:	9f 93       	push	r25
     a8a:	af 93       	push	r26
     a8c:	bf 93       	push	r27
     a8e:	cf 93       	push	r28
     a90:	df 93       	push	r29
     a92:	ef 93       	push	r30
     a94:	ff 93       	push	r31
  unsigned int i;
  unsigned int z;
  unsigned int mask;
 
  p++;
     a96:	e0 91 d2 02 	lds	r30, 0x02D2
     a9a:	f0 91 d3 02 	lds	r31, 0x02D3
     a9e:	31 96       	adiw	r30, 0x01	; 1
     aa0:	f0 93 d3 02 	sts	0x02D3, r31
     aa4:	e0 93 d2 02 	sts	0x02D2, r30
  z = x[p&MASK];
     aa8:	f7 70       	andi	r31, 0x07	; 7
     aaa:	ee 0f       	add	r30, r30
     aac:	ff 1f       	adc	r31, r31
     aae:	ec 52       	subi	r30, 0x2C	; 44
     ab0:	fd 4f       	sbci	r31, 0xFD	; 253
     ab2:	60 81       	ld	r22, Z
     ab4:	71 81       	ldd	r23, Z+1	; 0x01
 
  if (z) {
     ab6:	61 15       	cp	r22, r1
     ab8:	71 05       	cpc	r23, r1
     aba:	09 f4       	brne	.+2      	; 0xabe <__vector_13+0x52>
     abc:	46 c0       	rjmp	.+140    	; 0xb4a <__vector_13+0xde>
    x[p&MASK] = 0;
     abe:	11 82       	std	Z+1, r1	; 0x01
     ac0:	10 82       	st	Z, r1
     ac2:	a2 e0       	ldi	r26, 0x02	; 2
     ac4:	b2 e0       	ldi	r27, 0x02	; 2
    mask = 1;
     ac6:	21 e0       	ldi	r18, 0x01	; 1
     ac8:	30 e0       	ldi	r19, 0x00	; 0
    
    // this is slower
    for (i = 0; i <12; i++) {
     aca:	80 e0       	ldi	r24, 0x00	; 0
     acc:	90 e0       	ldi	r25, 0x00	; 0
      if (z&mask) {
        if(i > 7) {
		PORTE ^= (1 << (i - 8));
		} else {
			PORTB ^= (1 << i);
     ace:	c1 e0       	ldi	r28, 0x01	; 1
     ad0:	d0 e0       	ldi	r29, 0x00	; 0
    x[p&MASK] = 0;
    mask = 1;
    
    // this is slower
    for (i = 0; i <12; i++) {
      if (z&mask) {
     ad2:	a9 01       	movw	r20, r18
     ad4:	46 23       	and	r20, r22
     ad6:	57 23       	and	r21, r23
     ad8:	41 15       	cp	r20, r1
     ada:	51 05       	cpc	r21, r1
     adc:	71 f1       	breq	.+92     	; 0xb3a <__vector_13+0xce>
        if(i > 7) {
     ade:	88 30       	cpi	r24, 0x08	; 8
     ae0:	91 05       	cpc	r25, r1
     ae2:	68 f0       	brcs	.+26     	; 0xafe <__vector_13+0x92>
		PORTE ^= (1 << (i - 8));
     ae4:	ee b1       	in	r30, 0x0e	; 14
    mask <<= 1;
  }
  p = 0;
}

ISR (TIMER2_COMPA_vect) {
     ae6:	ac 01       	movw	r20, r24
     ae8:	48 50       	subi	r20, 0x08	; 8
     aea:	50 40       	sbci	r21, 0x00	; 0
    
    // this is slower
    for (i = 0; i <12; i++) {
      if (z&mask) {
        if(i > 7) {
		PORTE ^= (1 << (i - 8));
     aec:	8e 01       	movw	r16, r28
     aee:	02 c0       	rjmp	.+4      	; 0xaf4 <__vector_13+0x88>
     af0:	00 0f       	add	r16, r16
     af2:	11 1f       	adc	r17, r17
     af4:	4a 95       	dec	r20
     af6:	e2 f7       	brpl	.-8      	; 0xaf0 <__vector_13+0x84>
     af8:	e0 27       	eor	r30, r16
     afa:	ee b9       	out	0x0e, r30	; 14
     afc:	0a c0       	rjmp	.+20     	; 0xb12 <__vector_13+0xa6>
		} else {
			PORTB ^= (1 << i);
     afe:	e5 b1       	in	r30, 0x05	; 5
     b00:	ae 01       	movw	r20, r28
     b02:	08 2e       	mov	r0, r24
     b04:	02 c0       	rjmp	.+4      	; 0xb0a <__vector_13+0x9e>
     b06:	44 0f       	add	r20, r20
     b08:	55 1f       	adc	r21, r21
     b0a:	0a 94       	dec	r0
     b0c:	e2 f7       	brpl	.-8      	; 0xb06 <__vector_13+0x9a>
     b0e:	e4 27       	eor	r30, r20
     b10:	e5 b9       	out	0x05, r30	; 5
		}
        x[(p+f[i])&MASK] |= mask;
     b12:	ed 91       	ld	r30, X+
     b14:	fc 91       	ld	r31, X
     b16:	11 97       	sbiw	r26, 0x01	; 1
     b18:	40 91 d2 02 	lds	r20, 0x02D2
     b1c:	50 91 d3 02 	lds	r21, 0x02D3
     b20:	e4 0f       	add	r30, r20
     b22:	f5 1f       	adc	r31, r21
     b24:	f7 70       	andi	r31, 0x07	; 7
     b26:	ee 0f       	add	r30, r30
     b28:	ff 1f       	adc	r31, r31
     b2a:	ec 52       	subi	r30, 0x2C	; 44
     b2c:	fd 4f       	sbci	r31, 0xFD	; 253
     b2e:	40 81       	ld	r20, Z
     b30:	51 81       	ldd	r21, Z+1	; 0x01
     b32:	42 2b       	or	r20, r18
     b34:	53 2b       	or	r21, r19
     b36:	51 83       	std	Z+1, r21	; 0x01
     b38:	40 83       	st	Z, r20
  if (z) {
    x[p&MASK] = 0;
    mask = 1;
    
    // this is slower
    for (i = 0; i <12; i++) {
     b3a:	01 96       	adiw	r24, 0x01	; 1
     b3c:	12 96       	adiw	r26, 0x02	; 2
     b3e:	8c 30       	cpi	r24, 0x0C	; 12
     b40:	91 05       	cpc	r25, r1
     b42:	19 f0       	breq	.+6      	; 0xb4a <__vector_13+0xde>
		} else {
			PORTB ^= (1 << i);
		}
        x[(p+f[i])&MASK] |= mask;
      }
      mask <<= 1;
     b44:	22 0f       	add	r18, r18
     b46:	33 1f       	adc	r19, r19
     b48:	c4 cf       	rjmp	.-120    	; 0xad2 <__vector_13+0x66>
	   mask <<= 1;
	}
	*/

  }
}
     b4a:	ff 91       	pop	r31
     b4c:	ef 91       	pop	r30
     b4e:	df 91       	pop	r29
     b50:	cf 91       	pop	r28
     b52:	bf 91       	pop	r27
     b54:	af 91       	pop	r26
     b56:	9f 91       	pop	r25
     b58:	8f 91       	pop	r24
     b5a:	7f 91       	pop	r23
     b5c:	6f 91       	pop	r22
     b5e:	5f 91       	pop	r21
     b60:	4f 91       	pop	r20
     b62:	3f 91       	pop	r19
     b64:	2f 91       	pop	r18
     b66:	1f 91       	pop	r17
     b68:	0f 91       	pop	r16
     b6a:	0f 90       	pop	r0
     b6c:	0f be       	out	0x3f, r0	; 63
     b6e:	0f 90       	pop	r0
     b70:	1f 90       	pop	r1
     b72:	18 95       	reti

00000b74 <parseMidiMessage>:


/////////////////////////////////////////////////////////////////////////////////////////////////
// PARSE INCOMING MIDI
/////////////////////////////////////////////////////////////////////////////////////////////////
void parseMidiMessage(uchar *data, uchar len) {
     b74:	fc 01       	movw	r30, r24
	uchar cin = (*data) & 0x0f;
     b76:	20 81       	ld	r18, Z
	uchar Rch = (*(data+1)) & 0x0f;
	uchar note = *(data+2);
     b78:	82 81       	ldd	r24, Z+2	; 0x02
/////////////////////////////////////////////////////////////////////////////////////////////////
// PARSE INCOMING MIDI
/////////////////////////////////////////////////////////////////////////////////////////////////
void parseMidiMessage(uchar *data, uchar len) {
	uchar cin = (*data) & 0x0f;
	uchar Rch = (*(data+1)) & 0x0f;
     b7a:	91 81       	ldd	r25, Z+1	; 0x01
     b7c:	9f 70       	andi	r25, 0x0F	; 15
	uchar note = *(data+2);
	// velocity *(data + 3) // not use
	// PBBuf = (*(data + 3)) & 0x7f; /* use only MSB(7bit) */
	if (Rch != 0)
     b7e:	09 f0       	breq	.+2      	; 0xb82 <parseMidiMessage+0xe>
     b80:	ea c0       	rjmp	.+468    	; 0xd56 <parseMidiMessage+0x1e2>

/////////////////////////////////////////////////////////////////////////////////////////////////
// PARSE INCOMING MIDI
/////////////////////////////////////////////////////////////////////////////////////////////////
void parseMidiMessage(uchar *data, uchar len) {
	uchar cin = (*data) & 0x0f;
     b82:	92 2f       	mov	r25, r18
     b84:	9f 70       	andi	r25, 0x0F	; 15
	uchar note = *(data+2);
	// velocity *(data + 3) // not use
	// PBBuf = (*(data + 3)) & 0x7f; /* use only MSB(7bit) */
	if (Rch != 0)
		return;
	switch(cin) {
     b86:	98 30       	cpi	r25, 0x08	; 8
     b88:	39 f0       	breq	.+14     	; 0xb98 <parseMidiMessage+0x24>
     b8a:	99 30       	cpi	r25, 0x09	; 9
     b8c:	09 f0       	breq	.+2      	; 0xb90 <parseMidiMessage+0x1c>
     b8e:	de c0       	rjmp	.+444    	; 0xd4c <parseMidiMessage+0x1d8>
					PORTH &= ~(1 << PINH0);
					
				}
		break;
		case 9:	/* NOTE ON */
			if( *(data + 3) == 0){ // hum should not happen?
     b90:	93 81       	ldd	r25, Z+3	; 0x03
     b92:	99 23       	and	r25, r25
     b94:	09 f0       	breq	.+2      	; 0xb98 <parseMidiMessage+0x24>
     b96:	6d c0       	rjmp	.+218    	; 0xc72 <parseMidiMessage+0xfe>
				if(note == 48) {
     b98:	80 33       	cpi	r24, 0x30	; 48
     b9a:	19 f4       	brne	.+6      	; 0xba2 <parseMidiMessage+0x2e>
					PORTC &= ~(1 << PINC4);
     b9c:	44 98       	cbi	0x08, 4	; 8
					PORTE &= ~(1 << PINE7);
     b9e:	77 98       	cbi	0x0e, 7	; 14
     ba0:	d5 c0       	rjmp	.+426    	; 0xd4c <parseMidiMessage+0x1d8>
					
				} else if(note == 49) {
     ba2:	81 33       	cpi	r24, 0x31	; 49
     ba4:	19 f4       	brne	.+6      	; 0xbac <parseMidiMessage+0x38>
					PORTC &= ~(1 << PINC5);
     ba6:	45 98       	cbi	0x08, 5	; 8
					PORTE &= ~(1 << PINE6);
     ba8:	76 98       	cbi	0x0e, 6	; 14
     baa:	d0 c0       	rjmp	.+416    	; 0xd4c <parseMidiMessage+0x1d8>
					
				} else if(note == 50) {
     bac:	82 33       	cpi	r24, 0x32	; 50
     bae:	19 f4       	brne	.+6      	; 0xbb6 <parseMidiMessage+0x42>
					PORTC &= ~(1 << PINC6);
     bb0:	46 98       	cbi	0x08, 6	; 8
					PORTE &= ~(1 << PINE5);
     bb2:	75 98       	cbi	0x0e, 5	; 14
     bb4:	cb c0       	rjmp	.+406    	; 0xd4c <parseMidiMessage+0x1d8>
					
				} else if(note == 51) {
     bb6:	83 33       	cpi	r24, 0x33	; 51
     bb8:	19 f4       	brne	.+6      	; 0xbc0 <parseMidiMessage+0x4c>
					PORTC &= ~(1 << PINC7);
     bba:	47 98       	cbi	0x08, 7	; 8
					PORTE &= ~(1 << PINE4);
     bbc:	74 98       	cbi	0x0e, 4	; 14
     bbe:	c6 c0       	rjmp	.+396    	; 0xd4c <parseMidiMessage+0x1d8>
					
				} else if(note == 52) {
     bc0:	84 33       	cpi	r24, 0x34	; 52
     bc2:	49 f4       	brne	.+18     	; 0xbd6 <parseMidiMessage+0x62>
					PORTJ &= ~(1 << PINJ0);
     bc4:	80 91 05 01 	lds	r24, 0x0105
     bc8:	8e 7f       	andi	r24, 0xFE	; 254
     bca:	80 93 05 01 	sts	0x0105, r24
					PORTH &= ~(1 << PINH7);
     bce:	80 91 02 01 	lds	r24, 0x0102
     bd2:	8f 77       	andi	r24, 0x7F	; 127
     bd4:	b9 c0       	rjmp	.+370    	; 0xd48 <parseMidiMessage+0x1d4>
					
				} else if(note == 53) {
     bd6:	85 33       	cpi	r24, 0x35	; 53
     bd8:	49 f4       	brne	.+18     	; 0xbec <parseMidiMessage+0x78>
					PORTJ &= ~(1 << PINJ1);
     bda:	80 91 05 01 	lds	r24, 0x0105
     bde:	8d 7f       	andi	r24, 0xFD	; 253
     be0:	80 93 05 01 	sts	0x0105, r24
					PORTH &= ~(1 << PINH6);
     be4:	80 91 02 01 	lds	r24, 0x0102
     be8:	8f 7b       	andi	r24, 0xBF	; 191
     bea:	ae c0       	rjmp	.+348    	; 0xd48 <parseMidiMessage+0x1d4>
					
				} else if(note == 54) {
     bec:	86 33       	cpi	r24, 0x36	; 54
     bee:	49 f4       	brne	.+18     	; 0xc02 <parseMidiMessage+0x8e>
					PORTJ &= ~(1 << PINJ2);
     bf0:	80 91 05 01 	lds	r24, 0x0105
     bf4:	8b 7f       	andi	r24, 0xFB	; 251
     bf6:	80 93 05 01 	sts	0x0105, r24
					PORTH &= ~(1 << PINH5);
     bfa:	80 91 02 01 	lds	r24, 0x0102
     bfe:	8f 7d       	andi	r24, 0xDF	; 223
     c00:	a3 c0       	rjmp	.+326    	; 0xd48 <parseMidiMessage+0x1d4>
					
				} else if(note == 55) {
     c02:	87 33       	cpi	r24, 0x37	; 55
     c04:	49 f4       	brne	.+18     	; 0xc18 <parseMidiMessage+0xa4>
					PORTJ &= ~(1 << PINJ3);
     c06:	80 91 05 01 	lds	r24, 0x0105
     c0a:	87 7f       	andi	r24, 0xF7	; 247
     c0c:	80 93 05 01 	sts	0x0105, r24
					PORTH &= ~(1 << PINH4);
     c10:	80 91 02 01 	lds	r24, 0x0102
     c14:	8f 7e       	andi	r24, 0xEF	; 239
     c16:	98 c0       	rjmp	.+304    	; 0xd48 <parseMidiMessage+0x1d4>
					
				} else if(note == 56) {
     c18:	88 33       	cpi	r24, 0x38	; 56
     c1a:	49 f4       	brne	.+18     	; 0xc2e <parseMidiMessage+0xba>
					PORTJ &= ~(1 << PINJ4);
     c1c:	80 91 05 01 	lds	r24, 0x0105
     c20:	8f 7e       	andi	r24, 0xEF	; 239
     c22:	80 93 05 01 	sts	0x0105, r24
					PORTH &= ~(1 << PINH3);
     c26:	80 91 02 01 	lds	r24, 0x0102
     c2a:	87 7f       	andi	r24, 0xF7	; 247
     c2c:	8d c0       	rjmp	.+282    	; 0xd48 <parseMidiMessage+0x1d4>
					
				} else if(note == 57) {
     c2e:	89 33       	cpi	r24, 0x39	; 57
     c30:	49 f4       	brne	.+18     	; 0xc44 <parseMidiMessage+0xd0>
					PORTJ &= ~(1 << PINJ5);
     c32:	80 91 05 01 	lds	r24, 0x0105
     c36:	8f 7d       	andi	r24, 0xDF	; 223
     c38:	80 93 05 01 	sts	0x0105, r24
					PORTH &= ~(1 << PINH2);
     c3c:	80 91 02 01 	lds	r24, 0x0102
     c40:	8b 7f       	andi	r24, 0xFB	; 251
     c42:	82 c0       	rjmp	.+260    	; 0xd48 <parseMidiMessage+0x1d4>
					
				} else if(note == 58) {
     c44:	8a 33       	cpi	r24, 0x3A	; 58
     c46:	49 f4       	brne	.+18     	; 0xc5a <parseMidiMessage+0xe6>
					PORTJ &= ~(1 << PINJ6);
     c48:	80 91 05 01 	lds	r24, 0x0105
     c4c:	8f 7b       	andi	r24, 0xBF	; 191
     c4e:	80 93 05 01 	sts	0x0105, r24
					PORTH &= ~(1 << PINH1);
     c52:	80 91 02 01 	lds	r24, 0x0102
     c56:	8d 7f       	andi	r24, 0xFD	; 253
     c58:	77 c0       	rjmp	.+238    	; 0xd48 <parseMidiMessage+0x1d4>
					
				} else if(note == 59) {
     c5a:	8b 33       	cpi	r24, 0x3B	; 59
     c5c:	09 f0       	breq	.+2      	; 0xc60 <parseMidiMessage+0xec>
     c5e:	76 c0       	rjmp	.+236    	; 0xd4c <parseMidiMessage+0x1d8>
					PORTJ &= ~(1 << PINJ7);
     c60:	80 91 05 01 	lds	r24, 0x0105
     c64:	8f 77       	andi	r24, 0x7F	; 127
     c66:	80 93 05 01 	sts	0x0105, r24
					PORTH &= ~(1 << PINH0);
     c6a:	80 91 02 01 	lds	r24, 0x0102
     c6e:	8e 7f       	andi	r24, 0xFE	; 254
     c70:	6b c0       	rjmp	.+214    	; 0xd48 <parseMidiMessage+0x1d4>
					
				}
			} else {
				if(note == 48) {
     c72:	80 33       	cpi	r24, 0x30	; 48
     c74:	19 f4       	brne	.+6      	; 0xc7c <parseMidiMessage+0x108>
					PORTC |= (1 << PINC4);
     c76:	44 9a       	sbi	0x08, 4	; 8
					PORTE |= (1 << PINE7);
     c78:	77 9a       	sbi	0x0e, 7	; 14
     c7a:	68 c0       	rjmp	.+208    	; 0xd4c <parseMidiMessage+0x1d8>
					
				} else if(note == 49) {
     c7c:	81 33       	cpi	r24, 0x31	; 49
     c7e:	19 f4       	brne	.+6      	; 0xc86 <parseMidiMessage+0x112>
					PORTC |= (1 << PINC5);
     c80:	45 9a       	sbi	0x08, 5	; 8
					PORTE |= (1 << PINE6);
     c82:	76 9a       	sbi	0x0e, 6	; 14
     c84:	63 c0       	rjmp	.+198    	; 0xd4c <parseMidiMessage+0x1d8>
					
				} else if(note == 50) {
     c86:	82 33       	cpi	r24, 0x32	; 50
     c88:	19 f4       	brne	.+6      	; 0xc90 <parseMidiMessage+0x11c>
					PORTC |= (1 << PINC6);
     c8a:	46 9a       	sbi	0x08, 6	; 8
					PORTE |= (1 << PINE5);
     c8c:	75 9a       	sbi	0x0e, 5	; 14
     c8e:	5e c0       	rjmp	.+188    	; 0xd4c <parseMidiMessage+0x1d8>
					
				} else if(note == 51) {
     c90:	83 33       	cpi	r24, 0x33	; 51
     c92:	19 f4       	brne	.+6      	; 0xc9a <parseMidiMessage+0x126>
					PORTC |= (1 << PINC7);
     c94:	47 9a       	sbi	0x08, 7	; 8
					PORTE |= (1 << PINE4);
     c96:	74 9a       	sbi	0x0e, 4	; 14
     c98:	59 c0       	rjmp	.+178    	; 0xd4c <parseMidiMessage+0x1d8>
					
				} else if(note == 52) {
     c9a:	84 33       	cpi	r24, 0x34	; 52
     c9c:	49 f4       	brne	.+18     	; 0xcb0 <parseMidiMessage+0x13c>
					PORTJ |= (1 << PINJ0);
     c9e:	80 91 05 01 	lds	r24, 0x0105
     ca2:	81 60       	ori	r24, 0x01	; 1
     ca4:	80 93 05 01 	sts	0x0105, r24
					PORTH |= (1 << PINH7);
     ca8:	80 91 02 01 	lds	r24, 0x0102
     cac:	80 68       	ori	r24, 0x80	; 128
     cae:	4c c0       	rjmp	.+152    	; 0xd48 <parseMidiMessage+0x1d4>
					
				} else if(note == 53) {
     cb0:	85 33       	cpi	r24, 0x35	; 53
     cb2:	49 f4       	brne	.+18     	; 0xcc6 <parseMidiMessage+0x152>
					PORTJ |= (1 << PINJ1);
     cb4:	80 91 05 01 	lds	r24, 0x0105
     cb8:	82 60       	ori	r24, 0x02	; 2
     cba:	80 93 05 01 	sts	0x0105, r24
					PORTH |= (1 << PINH6);
     cbe:	80 91 02 01 	lds	r24, 0x0102
     cc2:	80 64       	ori	r24, 0x40	; 64
     cc4:	41 c0       	rjmp	.+130    	; 0xd48 <parseMidiMessage+0x1d4>
					
				} else if(note == 54) {
     cc6:	86 33       	cpi	r24, 0x36	; 54
     cc8:	49 f4       	brne	.+18     	; 0xcdc <parseMidiMessage+0x168>
					PORTJ |= (1 << PINJ2);
     cca:	80 91 05 01 	lds	r24, 0x0105
     cce:	84 60       	ori	r24, 0x04	; 4
     cd0:	80 93 05 01 	sts	0x0105, r24
					PORTH |= (1 << PINH5);
     cd4:	80 91 02 01 	lds	r24, 0x0102
     cd8:	80 62       	ori	r24, 0x20	; 32
     cda:	36 c0       	rjmp	.+108    	; 0xd48 <parseMidiMessage+0x1d4>
					
				} else if(note == 55) {
     cdc:	87 33       	cpi	r24, 0x37	; 55
     cde:	49 f4       	brne	.+18     	; 0xcf2 <parseMidiMessage+0x17e>
					PORTJ |= (1 << PINJ3);
     ce0:	80 91 05 01 	lds	r24, 0x0105
     ce4:	88 60       	ori	r24, 0x08	; 8
     ce6:	80 93 05 01 	sts	0x0105, r24
					PORTH |= (1 << PINH4);
     cea:	80 91 02 01 	lds	r24, 0x0102
     cee:	80 61       	ori	r24, 0x10	; 16
     cf0:	2b c0       	rjmp	.+86     	; 0xd48 <parseMidiMessage+0x1d4>
					
				} else if(note == 56) {
     cf2:	88 33       	cpi	r24, 0x38	; 56
     cf4:	49 f4       	brne	.+18     	; 0xd08 <parseMidiMessage+0x194>
					PORTJ |= (1 << PINJ4);
     cf6:	80 91 05 01 	lds	r24, 0x0105
     cfa:	80 61       	ori	r24, 0x10	; 16
     cfc:	80 93 05 01 	sts	0x0105, r24
					PORTH |= (1 << PINH3);
     d00:	80 91 02 01 	lds	r24, 0x0102
     d04:	88 60       	ori	r24, 0x08	; 8
     d06:	20 c0       	rjmp	.+64     	; 0xd48 <parseMidiMessage+0x1d4>
					
				} else if(note == 57) {
     d08:	89 33       	cpi	r24, 0x39	; 57
     d0a:	49 f4       	brne	.+18     	; 0xd1e <parseMidiMessage+0x1aa>
					PORTJ |= (1 << PINJ5);
     d0c:	80 91 05 01 	lds	r24, 0x0105
     d10:	80 62       	ori	r24, 0x20	; 32
     d12:	80 93 05 01 	sts	0x0105, r24
					PORTH |= (1 << PINH2);
     d16:	80 91 02 01 	lds	r24, 0x0102
     d1a:	84 60       	ori	r24, 0x04	; 4
     d1c:	15 c0       	rjmp	.+42     	; 0xd48 <parseMidiMessage+0x1d4>
					
				} else if(note == 58) {
     d1e:	8a 33       	cpi	r24, 0x3A	; 58
     d20:	49 f4       	brne	.+18     	; 0xd34 <parseMidiMessage+0x1c0>
					PORTJ |= (1 << PINJ6);
     d22:	80 91 05 01 	lds	r24, 0x0105
     d26:	80 64       	ori	r24, 0x40	; 64
     d28:	80 93 05 01 	sts	0x0105, r24
					PORTH |= (1 << PINH1);
     d2c:	80 91 02 01 	lds	r24, 0x0102
     d30:	82 60       	ori	r24, 0x02	; 2
     d32:	0a c0       	rjmp	.+20     	; 0xd48 <parseMidiMessage+0x1d4>
					
				} else if(note == 59) {
     d34:	8b 33       	cpi	r24, 0x3B	; 59
     d36:	51 f4       	brne	.+20     	; 0xd4c <parseMidiMessage+0x1d8>
					PORTJ |= (1 << PINJ7);
     d38:	80 91 05 01 	lds	r24, 0x0105
     d3c:	80 68       	ori	r24, 0x80	; 128
     d3e:	80 93 05 01 	sts	0x0105, r24
					PORTH |= (1 << PINH0);
     d42:	80 91 02 01 	lds	r24, 0x0102
     d46:	81 60       	ori	r24, 0x01	; 1
     d48:	80 93 02 01 	sts	0x0102, r24
					
				}
			}
		break;
	}
	if (len > 4) {
     d4c:	65 30       	cpi	r22, 0x05	; 5
     d4e:	18 f0       	brcs	.+6      	; 0xd56 <parseMidiMessage+0x1e2>
		parseMidiMessage(data+4, len-4);
     d50:	34 96       	adiw	r30, 0x04	; 4
     d52:	64 50       	subi	r22, 0x04	; 4
     d54:	10 cf       	rjmp	.-480    	; 0xb76 <parseMidiMessage+0x2>
     d56:	08 95       	ret

00000d58 <usbFunctionDescriptor>:
/////////////////////////////////////////////////////////////////////////////////////////////////
// USB<->MIDI
/////////////////////////////////////////////////////////////////////////////////////////////////
uchar usbFunctionDescriptor(usbRequest_t * rq)
{
	if (rq->wValue.bytes[1] == USBDESCR_DEVICE) {
     d58:	fc 01       	movw	r30, r24
     d5a:	83 81       	ldd	r24, Z+3	; 0x03
     d5c:	81 30       	cpi	r24, 0x01	; 1
     d5e:	41 f4       	brne	.+16     	; 0xd70 <usbFunctionDescriptor+0x18>
		usbMsgPtr = (uchar *) deviceDescrMIDI;
     d60:	8a e1       	ldi	r24, 0x1A	; 26
     d62:	91 e0       	ldi	r25, 0x01	; 1
     d64:	90 93 b4 02 	sts	0x02B4, r25
     d68:	80 93 b3 02 	sts	0x02B3, r24
		return sizeof(deviceDescrMIDI);
     d6c:	82 e1       	ldi	r24, 0x12	; 18
     d6e:	08 95       	ret
	} else {
		usbMsgPtr = (uchar *) configDescrMIDI;
     d70:	8c e2       	ldi	r24, 0x2C	; 44
     d72:	91 e0       	ldi	r25, 0x01	; 1
     d74:	90 93 b4 02 	sts	0x02B4, r25
     d78:	80 93 b3 02 	sts	0x02B3, r24
		return sizeof(configDescrMIDI);
     d7c:	85 e6       	ldi	r24, 0x65	; 101
	}
}
     d7e:	08 95       	ret

00000d80 <usbFunctionSetup>:

uchar usbFunctionSetup(uchar data[8])
{
	usbRequest_t *rq = (void *) data;
	if ((rq->bmRequestType & USBRQ_TYPE_MASK) == USBRQ_TYPE_CLASS) {
     d80:	fc 01       	movw	r30, r24
     d82:	80 81       	ld	r24, Z
     d84:	98 2f       	mov	r25, r24
     d86:	90 76       	andi	r25, 0x60	; 96
     d88:	90 32       	cpi	r25, 0x20	; 32
     d8a:	29 f4       	brne	.+10     	; 0xd96 <usbFunctionSetup+0x16>
		if ((rq->bmRequestType & USBRQ_DIR_MASK) ==
     d8c:	87 fd       	sbrc	r24, 7
     d8e:	03 c0       	rjmp	.+6      	; 0xd96 <usbFunctionSetup+0x16>
		    USBRQ_DIR_HOST_TO_DEVICE)
			sendEmptyFrame = 1;
     d90:	81 e0       	ldi	r24, 0x01	; 1
     d92:	80 93 98 02 	sts	0x0298, r24
	}
	return 0xff;
}
     d96:	8f ef       	ldi	r24, 0xFF	; 255
     d98:	08 95       	ret

00000d9a <usbFunctionWriteOut>:

void usbFunctionWriteOut(uchar * data, uchar len) // from computer
{
	parseMidiMessage(data, len);
     d9a:	0e 94 ba 05 	call	0xb74	; 0xb74 <parseMidiMessage>
}
     d9e:	08 95       	ret

00000da0 <usbFunctionWrite>:

uchar usbFunctionWrite(uchar * data, uchar len)
{
	return 1;
}
     da0:	81 e0       	ldi	r24, 0x01	; 1
     da2:	08 95       	ret

00000da4 <usbFunctionRead>:

uchar usbFunctionRead(uchar * data, uchar len)
{
	return 7;
}
     da4:	87 e0       	ldi	r24, 0x07	; 7
     da6:	08 95       	ret

00000da8 <eepromWrite>:
////////////////////////////////////////////////////////////////////////
// ------------------------------------------------------------------------------
// - Write to EEPROM
// ------------------------------------------------------------------------------
void eepromWrite(unsigned int uiAddress, unsigned char ucData) {
  while(EECR & (1<<EEPE));
     da8:	f9 99       	sbic	0x1f, 1	; 31
     daa:	fe cf       	rjmp	.-4      	; 0xda8 <eepromWrite>
  EEAR = uiAddress;
     dac:	92 bd       	out	0x22, r25	; 34
     dae:	81 bd       	out	0x21, r24	; 33
  EEDR = ucData;
     db0:	60 bd       	out	0x20, r22	; 32
  cli();
     db2:	f8 94       	cli
  EECR |= (1<<EEMPE);
     db4:	fa 9a       	sbi	0x1f, 2	; 31
  EECR |= (1<<EEPE);
     db6:	f9 9a       	sbi	0x1f, 1	; 31
  sei();
     db8:	78 94       	sei
}
     dba:	08 95       	ret

00000dbc <startBootloader>:
/* ------------------------------- BOOTLOADER ------------------------------ */
/* ------------------------------------------------------------------------- */
void (*jump_to_bootloader)(void) = 0x7000; __attribute__ ((unused))

void startBootloader(void) {
    eepromWrite(0 , 1);        // stay in bootloader
     dbc:	80 e0       	ldi	r24, 0x00	; 0
     dbe:	90 e0       	ldi	r25, 0x00	; 0
     dc0:	61 e0       	ldi	r22, 0x01	; 1
     dc2:	0e 94 d4 06 	call	0xda8	; 0xda8 <eepromWrite>
    TCCR2A = 0;
     dc6:	10 92 b0 00 	sts	0x00B0, r1
    TCCR2B = 0;
     dca:	10 92 b1 00 	sts	0x00B1, r1
    TCCR0A = 0;
     dce:	14 bc       	out	0x24, r1	; 36
    TCCR0B = 0;
     dd0:	15 bc       	out	0x25, r1	; 37
	TIMSK0 &= ~(1<<TOIE0);            // disable timer overflow
     dd2:	ee e6       	ldi	r30, 0x6E	; 110
     dd4:	f0 e0       	ldi	r31, 0x00	; 0
     dd6:	80 81       	ld	r24, Z
     dd8:	8e 7f       	andi	r24, 0xFE	; 254
     dda:	80 83       	st	Z, r24
	TIMSK1 &= ~(1<<TOIE1);            // disable timer overflow
     ddc:	ef e6       	ldi	r30, 0x6F	; 111
     dde:	f0 e0       	ldi	r31, 0x00	; 0
     de0:	80 81       	ld	r24, Z
     de2:	8e 7f       	andi	r24, 0xFE	; 254
     de4:	80 83       	st	Z, r24
	TIMSK2 &= ~(1<<TOIE2);            // disable timer overflow
     de6:	e0 e7       	ldi	r30, 0x70	; 112
     de8:	f0 e0       	ldi	r31, 0x00	; 0
     dea:	80 81       	ld	r24, Z
     dec:	8e 7f       	andi	r24, 0xFE	; 254
     dee:	80 83       	st	Z, r24
	TIMSK3 &= ~(1<<TOIE3);            // disable timer overflow
     df0:	e1 e7       	ldi	r30, 0x71	; 113
     df2:	f0 e0       	ldi	r31, 0x00	; 0
     df4:	80 81       	ld	r24, Z
     df6:	8e 7f       	andi	r24, 0xFE	; 254
     df8:	80 83       	st	Z, r24
	TIMSK4 &= ~(1<<TOIE4);            // disable timer overflow
     dfa:	e2 e7       	ldi	r30, 0x72	; 114
     dfc:	f0 e0       	ldi	r31, 0x00	; 0
     dfe:	80 81       	ld	r24, Z
     e00:	8e 7f       	andi	r24, 0xFE	; 254
     e02:	80 83       	st	Z, r24
	TIMSK5 &= ~(1<<TOIE5);            // disable timer overflow
     e04:	e3 e7       	ldi	r30, 0x73	; 115
     e06:	f0 e0       	ldi	r31, 0x00	; 0
     e08:	80 81       	ld	r24, Z
     e0a:	8e 7f       	andi	r24, 0xFE	; 254
     e0c:	80 83       	st	Z, r24
    cli();              // turn off interrupts
     e0e:	f8 94       	cli
    ADCSRA &= ~(1<<ADIE);  // disable ADC interrupts
     e10:	ea e7       	ldi	r30, 0x7A	; 122
     e12:	f0 e0       	ldi	r31, 0x00	; 0
     e14:	80 81       	ld	r24, Z
     e16:	87 7f       	andi	r24, 0xF7	; 247
     e18:	80 83       	st	Z, r24
    ADCSRA &= ~(1<<ADEN);  // disable ADC (turn off ADC power)       
     e1a:	80 81       	ld	r24, Z
     e1c:	8f 77       	andi	r24, 0x7F	; 127
     e1e:	80 83       	st	Z, r24
	PORTJ = 0;						// pull all pins low
     e20:	10 92 05 01 	sts	0x0105, r1
	PORTB = 0;
     e24:	15 b8       	out	0x05, r1	; 5
	PORTC = 0;	
     e26:	18 b8       	out	0x08, r1	; 8
	PORTD = 0;	
     e28:	1b b8       	out	0x0b, r1	; 11
	PORTE = 0;	
     e2a:	1e b8       	out	0x0e, r1	; 14
	PORTF = 0;	
     e2c:	11 ba       	out	0x11, r1	; 17
	PORTG = 0;	
     e2e:	14 ba       	out	0x14, r1	; 20
	PORTH = 0;	
     e30:	10 92 02 01 	sts	0x0102, r1
	PORTL = 0;         
     e34:	10 92 0b 01 	sts	0x010B, r1
    wdt_disable();          // disable watchdog timer
     e38:	88 e1       	ldi	r24, 0x18	; 24
     e3a:	0f b6       	in	r0, 0x3f	; 63
     e3c:	f8 94       	cli
     e3e:	80 93 60 00 	sts	0x0060, r24
     e42:	10 92 60 00 	sts	0x0060, r1
     e46:	0f be       	out	0x3f, r0	; 63
    usbDeviceDisconnect();       // disconnect from USB bus
     e48:	54 98       	cbi	0x0a, 4	; 10
     e4a:	5c 98       	cbi	0x0b, 4	; 11
    jump_to_bootloader();
     e4c:	e0 91 1a 02 	lds	r30, 0x021A
     e50:	f0 91 1b 02 	lds	r31, 0x021B
     e54:	09 95       	icall
}
     e56:	08 95       	ret

00000e58 <AllOff>:

////////////////////////////////////////////////////////////////////////
// UTILS
////////////////////////////////////////////////////////////////////////
void AllOff() {
	PORTC &= ~(1 << 7);
     e58:	47 98       	cbi	0x08, 7	; 8
	PORTC &= ~(1 << 6);
     e5a:	46 98       	cbi	0x08, 6	; 8
	PORTC &= ~(1 << 5);
     e5c:	45 98       	cbi	0x08, 5	; 8
	PORTC &= ~(1 << 4);
     e5e:	44 98       	cbi	0x08, 4	; 8
	PORTE &= ~(1 << 7);
     e60:	77 98       	cbi	0x0e, 7	; 14
	PORTE &= ~(1 << 6);
     e62:	76 98       	cbi	0x0e, 6	; 14
	PORTE &= ~(1 << 5);
     e64:	75 98       	cbi	0x0e, 5	; 14
	PORTE &= ~(1 << 4);
     e66:	74 98       	cbi	0x0e, 4	; 14
	PORTJ = 0x00;
     e68:	10 92 05 01 	sts	0x0105, r1
	PORTH = 0x00;
     e6c:	10 92 02 01 	sts	0x0102, r1
}
     e70:	08 95       	ret

00000e72 <main>:
		
////////////////////////////////////////////////////////////////////////
// MAIN
////////////////////////////////////////////////////////////////////////
int main(void)
{
     e72:	2f 92       	push	r2
     e74:	3f 92       	push	r3
     e76:	4f 92       	push	r4
     e78:	5f 92       	push	r5
     e7a:	6f 92       	push	r6
     e7c:	7f 92       	push	r7
     e7e:	8f 92       	push	r8
     e80:	9f 92       	push	r9
     e82:	af 92       	push	r10
     e84:	bf 92       	push	r11
     e86:	cf 92       	push	r12
     e88:	df 92       	push	r13
     e8a:	ef 92       	push	r14
     e8c:	ff 92       	push	r15
     e8e:	0f 93       	push	r16
     e90:	1f 93       	push	r17
     e92:	df 93       	push	r29
     e94:	cf 93       	push	r28
     e96:	00 d0       	rcall	.+0      	; 0xe98 <main+0x26>
     e98:	00 d0       	rcall	.+0      	; 0xe9a <main+0x28>
     e9a:	cd b7       	in	r28, 0x3d	; 61
     e9c:	de b7       	in	r29, 0x3e	; 62
	IOConf();
     e9e:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <IOConf>
static void USBConf(void)
{
	uchar i, j;

	/* activate pull-ups except on USB lines */
	USB_CFG_IOPORT =
     ea2:	8c ef       	ldi	r24, 0xFC	; 252
     ea4:	8b b9       	out	0x0b, r24	; 11
	    (uchar) ~ ((1 << USB_CFG_DMINUS_BIT) |
		       (1 << USB_CFG_DPLUS_BIT));
	/* all pins input except USB (-> USB reset) */
	#ifdef USB_CFG_PULLUP_IOPORT	/* use usbDeviceConnect()/usbDeviceDisconnect() if available */
		USBDDR = 0;		/* we do RESET by deactivating pullup */
     ea6:	1a b8       	out	0x0a, r1	; 10
		usbDeviceDisconnect();
     ea8:	54 98       	cbi	0x0a, 4	; 10
     eaa:	5c 98       	cbi	0x0b, 4	; 11
		while (--j) {		/* USB Reset by device only required on Watchdog Reset */
			i = 0;
			while (--i);	/* delay >10ms for USB reset */
		}
	#ifdef USB_CFG_PULLUP_IOPORT
		usbDeviceConnect();
     eac:	54 9a       	sbi	0x0a, 4	; 10
     eae:	5c 9a       	sbi	0x0b, 4	; 11
	#else
		USBDDR = 0;		/*  remove USB reset condition */
	#endif

	DDRD = 0b11010000; // set debug led
     eb0:	80 ed       	ldi	r24, 0xD0	; 208
     eb2:	8a b9       	out	0x0a, r24	; 10
////////////////////////////////////////////////////////////////////////
int main(void)
{
	IOConf();
	USBConf();
	usbInit();
     eb4:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <usbInit>
	timerCC_init();
     eb8:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <timerCC_init>
	timerPWM_init();
     ebc:	0e 94 00 05 	call	0xa00	; 0xa00 <timerPWM_init>
	pwm_init();
     ec0:	0e 94 13 05 	call	0xa26	; 0xa26 <pwm_init>
	touch_init();
     ec4:	0e 94 b8 03 	call	0x770	; 0x770 <touch_init>
	sei();
     ec8:	78 94       	sei
	
	
	
	uchar midiMsg[4]; // 8bit midi
    uint16_t i = 0; // check capacitive touch every i
     eca:	00 e0       	ldi	r16, 0x00	; 0
     ecc:	10 e0       	ldi	r17, 0x00	; 0
        if(!(PIND & (1<<PIND5))) {
            startBootloader();
        }

		// standalone SWITCH
        standalone = !(PINL & (1<<PINL0)) ? 1 : 0;
     ece:	99 24       	eor	r9, r9
     ed0:	93 94       	inc	r9
				sendEmptyFrame = 0;
				if(!standalone) {
					while (!usbInterruptIsReady()) {
						usbPoll();
					}
					usbSetInterrupt(midiMsg, 4);
     ed2:	2e 01       	movw	r4, r28
     ed4:	08 94       	sec
     ed6:	41 1c       	adc	r4, r1
     ed8:	51 1c       	adc	r5, r1
						} else if(j == 10) {
							PORTC &= ~(1 << 5);
						} else if(j == 11) {
							PORTC &= ~(1 << 4);
						}
						PORTE &= ~(1 << (j - 4));
     eda:	91 e0       	ldi	r25, 0x01	; 1
     edc:	e9 2e       	mov	r14, r25
     ede:	f1 2c       	mov	r15, r1
					}
					midiMsg[0] = 0x08; 
     ee0:	88 e0       	ldi	r24, 0x08	; 8
     ee2:	38 2e       	mov	r3, r24
					midiMsg[1] = 0x80;
     ee4:	b0 e8       	ldi	r27, 0x80	; 128
     ee6:	2b 2e       	mov	r2, r27
    uchar j = 0; // 12 strings
    uint16_t sample[12]; // touch adc
	
	for (;;) {

		i++; // capacitive delay counter
     ee8:	0f 5f       	subi	r16, 0xFF	; 255
     eea:	1f 4f       	sbci	r17, 0xFF	; 255

		if(!standalone) {
     eec:	80 91 97 02 	lds	r24, 0x0297
     ef0:	88 23       	and	r24, r24
     ef2:	11 f4       	brne	.+4      	; 0xef8 <main+0x86>
			usbPoll(); // every 50ms min
     ef4:	0e 94 0f 01 	call	0x21e	; 0x21e <usbPoll>
		}
		
		// go to BOOTLOADER
        if(!(PIND & (1<<PIND5))) {
     ef8:	4d 99       	sbic	0x09, 5	; 9
     efa:	02 c0       	rjmp	.+4      	; 0xf00 <main+0x8e>
            startBootloader();
     efc:	0e 94 de 06 	call	0xdbc	; 0xdbc <startBootloader>
        }

		// standalone SWITCH
        standalone = !(PINL & (1<<PINL0)) ? 1 : 0;
     f00:	90 91 09 01 	lds	r25, 0x0109
     f04:	81 e0       	ldi	r24, 0x01	; 1
     f06:	90 fd       	sbrc	r25, 0
     f08:	80 e0       	ldi	r24, 0x00	; 0
     f0a:	80 93 97 02 	sts	0x0297, r24
		
		// capacitive TOUCH ADC READ
		if(i == 100) {
     f0e:	04 36       	cpi	r16, 0x64	; 100
     f10:	11 05       	cpc	r17, r1
     f12:	71 f4       	brne	.+28     	; 0xf30 <main+0xbe>
			if(touch_measure(&btn0) > 340) {
     f14:	8c e1       	ldi	r24, 0x1C	; 28
     f16:	92 e0       	ldi	r25, 0x02	; 2
     f18:	0e 94 c6 03 	call	0x78c	; 0x78c <touch_measure>
     f1c:	21 e0       	ldi	r18, 0x01	; 1
     f1e:	85 35       	cpi	r24, 0x55	; 85
     f20:	92 07       	cpc	r25, r18
     f22:	18 f0       	brcs	.+6      	; 0xf2a <main+0xb8>
				currentNoteBuffer[0] = 1;
     f24:	90 92 7f 02 	sts	0x027F, r9
     f28:	d2 c0       	rjmp	.+420    	; 0x10ce <main+0x25c>
			} else {
				currentNoteBuffer[0] = 0;
     f2a:	10 92 7f 02 	sts	0x027F, r1
     f2e:	cf c0       	rjmp	.+414    	; 0x10ce <main+0x25c>
			}
		} else if(i == 200) {
     f30:	08 3c       	cpi	r16, 0xC8	; 200
     f32:	11 05       	cpc	r17, r1
     f34:	71 f4       	brne	.+28     	; 0xf52 <main+0xe0>
			if(touch_measure(&btn1) > 340) {
     f36:	84 e2       	ldi	r24, 0x24	; 36
     f38:	92 e0       	ldi	r25, 0x02	; 2
     f3a:	0e 94 c6 03 	call	0x78c	; 0x78c <touch_measure>
     f3e:	21 e0       	ldi	r18, 0x01	; 1
     f40:	85 35       	cpi	r24, 0x55	; 85
     f42:	92 07       	cpc	r25, r18
     f44:	18 f0       	brcs	.+6      	; 0xf4c <main+0xda>
				currentNoteBuffer[1] = 1;
     f46:	90 92 80 02 	sts	0x0280, r9
     f4a:	c1 c0       	rjmp	.+386    	; 0x10ce <main+0x25c>
			} else {
				currentNoteBuffer[1] = 0;
     f4c:	10 92 80 02 	sts	0x0280, r1
     f50:	be c0       	rjmp	.+380    	; 0x10ce <main+0x25c>
			}
		} else if(i == 300) {
     f52:	81 e0       	ldi	r24, 0x01	; 1
     f54:	0c 32       	cpi	r16, 0x2C	; 44
     f56:	18 07       	cpc	r17, r24
     f58:	71 f4       	brne	.+28     	; 0xf76 <main+0x104>
			if(touch_measure(&btn2) > 340) {
     f5a:	8c e2       	ldi	r24, 0x2C	; 44
     f5c:	92 e0       	ldi	r25, 0x02	; 2
     f5e:	0e 94 c6 03 	call	0x78c	; 0x78c <touch_measure>
     f62:	21 e0       	ldi	r18, 0x01	; 1
     f64:	85 35       	cpi	r24, 0x55	; 85
     f66:	92 07       	cpc	r25, r18
     f68:	18 f0       	brcs	.+6      	; 0xf70 <main+0xfe>
				currentNoteBuffer[2] = 1;
     f6a:	90 92 81 02 	sts	0x0281, r9
     f6e:	af c0       	rjmp	.+350    	; 0x10ce <main+0x25c>
			} else {
				currentNoteBuffer[2] = 0;
     f70:	10 92 81 02 	sts	0x0281, r1
     f74:	ac c0       	rjmp	.+344    	; 0x10ce <main+0x25c>
			}
		} else if(i == 400) {
     f76:	81 e0       	ldi	r24, 0x01	; 1
     f78:	00 39       	cpi	r16, 0x90	; 144
     f7a:	18 07       	cpc	r17, r24
     f7c:	71 f4       	brne	.+28     	; 0xf9a <main+0x128>
			if(touch_measure(&btn3) > 340) {
     f7e:	84 e3       	ldi	r24, 0x34	; 52
     f80:	92 e0       	ldi	r25, 0x02	; 2
     f82:	0e 94 c6 03 	call	0x78c	; 0x78c <touch_measure>
     f86:	21 e0       	ldi	r18, 0x01	; 1
     f88:	85 35       	cpi	r24, 0x55	; 85
     f8a:	92 07       	cpc	r25, r18
     f8c:	18 f0       	brcs	.+6      	; 0xf94 <main+0x122>
				currentNoteBuffer[3] = 1;
     f8e:	90 92 82 02 	sts	0x0282, r9
     f92:	9d c0       	rjmp	.+314    	; 0x10ce <main+0x25c>
			} else {
				currentNoteBuffer[3] = 0;
     f94:	10 92 82 02 	sts	0x0282, r1
     f98:	9a c0       	rjmp	.+308    	; 0x10ce <main+0x25c>
			}
		} else if(i == 500) {
     f9a:	81 e0       	ldi	r24, 0x01	; 1
     f9c:	04 3f       	cpi	r16, 0xF4	; 244
     f9e:	18 07       	cpc	r17, r24
     fa0:	71 f4       	brne	.+28     	; 0xfbe <main+0x14c>
			if(touch_measure(&btn4) > 340) {
     fa2:	8c e3       	ldi	r24, 0x3C	; 60
     fa4:	92 e0       	ldi	r25, 0x02	; 2
     fa6:	0e 94 c6 03 	call	0x78c	; 0x78c <touch_measure>
     faa:	21 e0       	ldi	r18, 0x01	; 1
     fac:	85 35       	cpi	r24, 0x55	; 85
     fae:	92 07       	cpc	r25, r18
     fb0:	18 f0       	brcs	.+6      	; 0xfb8 <main+0x146>
				currentNoteBuffer[4] = 1;
     fb2:	90 92 83 02 	sts	0x0283, r9
     fb6:	8b c0       	rjmp	.+278    	; 0x10ce <main+0x25c>
			} else {
				currentNoteBuffer[4] = 0;
     fb8:	10 92 83 02 	sts	0x0283, r1
     fbc:	88 c0       	rjmp	.+272    	; 0x10ce <main+0x25c>
			}
		} else if(i == 600) {
     fbe:	82 e0       	ldi	r24, 0x02	; 2
     fc0:	08 35       	cpi	r16, 0x58	; 88
     fc2:	18 07       	cpc	r17, r24
     fc4:	71 f4       	brne	.+28     	; 0xfe2 <main+0x170>
			if(touch_measure(&btn5) > 340) {
     fc6:	84 e4       	ldi	r24, 0x44	; 68
     fc8:	92 e0       	ldi	r25, 0x02	; 2
     fca:	0e 94 c6 03 	call	0x78c	; 0x78c <touch_measure>
     fce:	21 e0       	ldi	r18, 0x01	; 1
     fd0:	85 35       	cpi	r24, 0x55	; 85
     fd2:	92 07       	cpc	r25, r18
     fd4:	18 f0       	brcs	.+6      	; 0xfdc <main+0x16a>
				currentNoteBuffer[5] = 1;
     fd6:	90 92 84 02 	sts	0x0284, r9
     fda:	79 c0       	rjmp	.+242    	; 0x10ce <main+0x25c>
			} else {
				currentNoteBuffer[5] = 0;
     fdc:	10 92 84 02 	sts	0x0284, r1
     fe0:	76 c0       	rjmp	.+236    	; 0x10ce <main+0x25c>
			}
		} else if(i == 700) {
     fe2:	82 e0       	ldi	r24, 0x02	; 2
     fe4:	0c 3b       	cpi	r16, 0xBC	; 188
     fe6:	18 07       	cpc	r17, r24
     fe8:	71 f4       	brne	.+28     	; 0x1006 <main+0x194>
			if(touch_measure(&btn6) > 340) {
     fea:	8c e4       	ldi	r24, 0x4C	; 76
     fec:	92 e0       	ldi	r25, 0x02	; 2
     fee:	0e 94 c6 03 	call	0x78c	; 0x78c <touch_measure>
     ff2:	21 e0       	ldi	r18, 0x01	; 1
     ff4:	85 35       	cpi	r24, 0x55	; 85
     ff6:	92 07       	cpc	r25, r18
     ff8:	18 f0       	brcs	.+6      	; 0x1000 <main+0x18e>
				currentNoteBuffer[6] = 1;
     ffa:	90 92 85 02 	sts	0x0285, r9
     ffe:	67 c0       	rjmp	.+206    	; 0x10ce <main+0x25c>
			} else {
				currentNoteBuffer[6] = 0;
    1000:	10 92 85 02 	sts	0x0285, r1
    1004:	64 c0       	rjmp	.+200    	; 0x10ce <main+0x25c>
			}
		} else if(i == 800) {
    1006:	83 e0       	ldi	r24, 0x03	; 3
    1008:	00 32       	cpi	r16, 0x20	; 32
    100a:	18 07       	cpc	r17, r24
    100c:	71 f4       	brne	.+28     	; 0x102a <main+0x1b8>
			if(touch_measure(&btn7) > 340) {
    100e:	84 e5       	ldi	r24, 0x54	; 84
    1010:	92 e0       	ldi	r25, 0x02	; 2
    1012:	0e 94 c6 03 	call	0x78c	; 0x78c <touch_measure>
    1016:	21 e0       	ldi	r18, 0x01	; 1
    1018:	85 35       	cpi	r24, 0x55	; 85
    101a:	92 07       	cpc	r25, r18
    101c:	18 f0       	brcs	.+6      	; 0x1024 <main+0x1b2>
				currentNoteBuffer[7] = 1;
    101e:	90 92 86 02 	sts	0x0286, r9
    1022:	55 c0       	rjmp	.+170    	; 0x10ce <main+0x25c>
			} else {
				currentNoteBuffer[7] = 0;
    1024:	10 92 86 02 	sts	0x0286, r1
    1028:	52 c0       	rjmp	.+164    	; 0x10ce <main+0x25c>
			}
		} else if(i == 900) {
    102a:	83 e0       	ldi	r24, 0x03	; 3
    102c:	04 38       	cpi	r16, 0x84	; 132
    102e:	18 07       	cpc	r17, r24
    1030:	71 f4       	brne	.+28     	; 0x104e <main+0x1dc>
			if(touch_measure(&btn8) > 340) {
    1032:	8c e5       	ldi	r24, 0x5C	; 92
    1034:	92 e0       	ldi	r25, 0x02	; 2
    1036:	0e 94 c6 03 	call	0x78c	; 0x78c <touch_measure>
    103a:	21 e0       	ldi	r18, 0x01	; 1
    103c:	85 35       	cpi	r24, 0x55	; 85
    103e:	92 07       	cpc	r25, r18
    1040:	18 f0       	brcs	.+6      	; 0x1048 <main+0x1d6>
				currentNoteBuffer[8] = 1;
    1042:	90 92 87 02 	sts	0x0287, r9
    1046:	43 c0       	rjmp	.+134    	; 0x10ce <main+0x25c>
			} else {
				currentNoteBuffer[8] = 0;
    1048:	10 92 87 02 	sts	0x0287, r1
    104c:	40 c0       	rjmp	.+128    	; 0x10ce <main+0x25c>
			}
		} else if(i == 1000) {
    104e:	83 e0       	ldi	r24, 0x03	; 3
    1050:	08 3e       	cpi	r16, 0xE8	; 232
    1052:	18 07       	cpc	r17, r24
    1054:	71 f4       	brne	.+28     	; 0x1072 <main+0x200>
			if(touch_measure(&btn9) > 340) {
    1056:	84 e6       	ldi	r24, 0x64	; 100
    1058:	92 e0       	ldi	r25, 0x02	; 2
    105a:	0e 94 c6 03 	call	0x78c	; 0x78c <touch_measure>
    105e:	21 e0       	ldi	r18, 0x01	; 1
    1060:	85 35       	cpi	r24, 0x55	; 85
    1062:	92 07       	cpc	r25, r18
    1064:	18 f0       	brcs	.+6      	; 0x106c <main+0x1fa>
				currentNoteBuffer[9] = 1;
    1066:	90 92 88 02 	sts	0x0288, r9
    106a:	31 c0       	rjmp	.+98     	; 0x10ce <main+0x25c>
			} else {
				currentNoteBuffer[9] = 0;
    106c:	10 92 88 02 	sts	0x0288, r1
    1070:	2e c0       	rjmp	.+92     	; 0x10ce <main+0x25c>
			}
		} else if(i == 1200) {
    1072:	84 e0       	ldi	r24, 0x04	; 4
    1074:	00 3b       	cpi	r16, 0xB0	; 176
    1076:	18 07       	cpc	r17, r24
    1078:	71 f4       	brne	.+28     	; 0x1096 <main+0x224>
			if(touch_measure(&btn10) > 340) {
    107a:	8c e6       	ldi	r24, 0x6C	; 108
    107c:	92 e0       	ldi	r25, 0x02	; 2
    107e:	0e 94 c6 03 	call	0x78c	; 0x78c <touch_measure>
    1082:	21 e0       	ldi	r18, 0x01	; 1
    1084:	85 35       	cpi	r24, 0x55	; 85
    1086:	92 07       	cpc	r25, r18
    1088:	18 f0       	brcs	.+6      	; 0x1090 <main+0x21e>
				currentNoteBuffer[10] = 1;
    108a:	90 92 89 02 	sts	0x0289, r9
    108e:	1f c0       	rjmp	.+62     	; 0x10ce <main+0x25c>
			} else {
				currentNoteBuffer[10] = 0;
    1090:	10 92 89 02 	sts	0x0289, r1
    1094:	1c c0       	rjmp	.+56     	; 0x10ce <main+0x25c>
			}
		} else if(i == 1300) {
    1096:	85 e0       	ldi	r24, 0x05	; 5
    1098:	04 31       	cpi	r16, 0x14	; 20
    109a:	18 07       	cpc	r17, r24
    109c:	71 f4       	brne	.+28     	; 0x10ba <main+0x248>
			if(touch_measure(&btn11) > 340) {
    109e:	84 e7       	ldi	r24, 0x74	; 116
    10a0:	92 e0       	ldi	r25, 0x02	; 2
    10a2:	0e 94 c6 03 	call	0x78c	; 0x78c <touch_measure>
    10a6:	21 e0       	ldi	r18, 0x01	; 1
    10a8:	85 35       	cpi	r24, 0x55	; 85
    10aa:	92 07       	cpc	r25, r18
    10ac:	18 f0       	brcs	.+6      	; 0x10b4 <main+0x242>
				currentNoteBuffer[11] = 1;
    10ae:	90 92 8a 02 	sts	0x028A, r9
    10b2:	0d c0       	rjmp	.+26     	; 0x10ce <main+0x25c>
			} else {
				currentNoteBuffer[11] = 0;
    10b4:	10 92 8a 02 	sts	0x028A, r1
    10b8:	0a c0       	rjmp	.+20     	; 0x10ce <main+0x25c>
			}
		} else if(i > 1400) {
    10ba:	85 e0       	ldi	r24, 0x05	; 5
    10bc:	09 37       	cpi	r16, 0x79	; 121
    10be:	18 07       	cpc	r17, r24
    10c0:	30 f0       	brcs	.+12     	; 0x10ce <main+0x25c>
			PORTD ^= (1 << PIND6);
    10c2:	8b b1       	in	r24, 0x0b	; 11
    10c4:	90 e4       	ldi	r25, 0x40	; 64
    10c6:	89 27       	eor	r24, r25
    10c8:	8b b9       	out	0x0b, r24	; 11
			i = 0;
    10ca:	00 e0       	ldi	r16, 0x00	; 0
    10cc:	10 e0       	ldi	r17, 0x00	; 0
    10ce:	ac ef       	ldi	r26, 0xFC	; 252
    10d0:	aa 2e       	mov	r10, r26
    10d2:	af ef       	ldi	r26, 0xFF	; 255
    10d4:	ba 2e       	mov	r11, r26
    10d6:	f7 e0       	ldi	r31, 0x07	; 7
    10d8:	6f 2e       	mov	r6, r31
    10da:	71 2c       	mov	r7, r1
    10dc:	cc 24       	eor	r12, r12
    10de:	dd 24       	eor	r13, r13
						}
						PORTE |= (1 << (j - 4));
					}
					midiMsg[0] = 0x09;
					midiMsg[1] = 0x90;
					midiMsg[3] = 0x7f;
    10e0:	ef e7       	ldi	r30, 0x7F	; 127
    10e2:	8e 2e       	mov	r8, r30
		
		// CAPACITIVE TOUCH -> PC via MIDI NOTE
		for(j = 0; j < 12; j++) {
			
			// blue led monitor bandwidth
			PORTD ^= (1 << PIND7);
    10e4:	8b b1       	in	r24, 0x0b	; 11
    10e6:	80 58       	subi	r24, 0x80	; 128
    10e8:	8b b9       	out	0x0b, r24	; 11
			
			if(currentNoteBuffer[j] != lastNoteBuffer[j]) {
    10ea:	f6 01       	movw	r30, r12
    10ec:	e1 58       	subi	r30, 0x81	; 129
    10ee:	fd 4f       	sbci	r31, 0xFD	; 253
    10f0:	90 81       	ld	r25, Z
    10f2:	d6 01       	movw	r26, r12
    10f4:	a5 57       	subi	r26, 0x75	; 117
    10f6:	bd 4f       	sbci	r27, 0xFD	; 253
    10f8:	8c 91       	ld	r24, X
    10fa:	98 17       	cp	r25, r24
    10fc:	09 f4       	brne	.+2      	; 0x1100 <main+0x28e>
    10fe:	8b c0       	rjmp	.+278    	; 0x1216 <main+0x3a4>
				lastNoteBuffer[j] = currentNoteBuffer[j];
    1100:	80 81       	ld	r24, Z
    1102:	8c 93       	st	X, r24

				if(currentNoteBuffer[j] == 1) { // NOTE ON
    1104:	80 81       	ld	r24, Z
    1106:	81 30       	cpi	r24, 0x01	; 1
    1108:	c9 f5       	brne	.+114    	; 0x117c <main+0x30a>
    110a:	8c 2d       	mov	r24, r12
					if(j < 8) {
    110c:	88 30       	cpi	r24, 0x08	; 8
    110e:	c8 f4       	brcc	.+50     	; 0x1142 <main+0x2d0>
						PORTJ |= (1 << j + 7 - ((j * 2))); // led
    1110:	20 91 05 01 	lds	r18, 0x0105
    1114:	c7 01       	movw	r24, r14
    1116:	06 2c       	mov	r0, r6
    1118:	02 c0       	rjmp	.+4      	; 0x111e <main+0x2ac>
    111a:	88 0f       	add	r24, r24
    111c:	99 1f       	adc	r25, r25
    111e:	0a 94       	dec	r0
    1120:	e2 f7       	brpl	.-8      	; 0x111a <main+0x2a8>
    1122:	28 2b       	or	r18, r24
    1124:	20 93 05 01 	sts	0x0105, r18
						PORTH |= (1 << j); // mosfet
    1128:	20 91 02 01 	lds	r18, 0x0102
    112c:	c7 01       	movw	r24, r14
    112e:	0c 2c       	mov	r0, r12
    1130:	02 c0       	rjmp	.+4      	; 0x1136 <main+0x2c4>
    1132:	88 0f       	add	r24, r24
    1134:	99 1f       	adc	r25, r25
    1136:	0a 94       	dec	r0
    1138:	e2 f7       	brpl	.-8      	; 0x1132 <main+0x2c0>
    113a:	28 2b       	or	r18, r24
    113c:	20 93 02 01 	sts	0x0102, r18
    1140:	17 c0       	rjmp	.+46     	; 0x1170 <main+0x2fe>
					} else {
						if(j == 8) {
    1142:	88 30       	cpi	r24, 0x08	; 8
    1144:	11 f4       	brne	.+4      	; 0x114a <main+0x2d8>
							PORTC |= (1 << 7);
    1146:	47 9a       	sbi	0x08, 7	; 8
    1148:	09 c0       	rjmp	.+18     	; 0x115c <main+0x2ea>
						} else if(j == 9) {
    114a:	89 30       	cpi	r24, 0x09	; 9
    114c:	11 f4       	brne	.+4      	; 0x1152 <main+0x2e0>
							PORTC |= (1 << 6);
    114e:	46 9a       	sbi	0x08, 6	; 8
    1150:	05 c0       	rjmp	.+10     	; 0x115c <main+0x2ea>
						} else if(j == 10) {
    1152:	8a 30       	cpi	r24, 0x0A	; 10
    1154:	11 f4       	brne	.+4      	; 0x115a <main+0x2e8>
							PORTC |= (1 << 5);
    1156:	45 9a       	sbi	0x08, 5	; 8
    1158:	01 c0       	rjmp	.+2      	; 0x115c <main+0x2ea>
						} else if(j == 11) {
							PORTC |= (1 << 4);
    115a:	44 9a       	sbi	0x08, 4	; 8
						}
						PORTE |= (1 << (j - 4));
    115c:	2e b1       	in	r18, 0x0e	; 14
    115e:	c7 01       	movw	r24, r14
    1160:	0a 2c       	mov	r0, r10
    1162:	02 c0       	rjmp	.+4      	; 0x1168 <main+0x2f6>
    1164:	88 0f       	add	r24, r24
    1166:	99 1f       	adc	r25, r25
    1168:	0a 94       	dec	r0
    116a:	e2 f7       	brpl	.-8      	; 0x1164 <main+0x2f2>
    116c:	28 2b       	or	r18, r24
    116e:	2e b9       	out	0x0e, r18	; 14
					}
					midiMsg[0] = 0x09;
    1170:	29 e0       	ldi	r18, 0x09	; 9
    1172:	29 83       	std	Y+1, r18	; 0x01
					midiMsg[1] = 0x90;
    1174:	80 e9       	ldi	r24, 0x90	; 144
    1176:	8a 83       	std	Y+2, r24	; 0x02
					midiMsg[3] = 0x7f;
    1178:	8c 82       	std	Y+4, r8	; 0x04
    117a:	39 c0       	rjmp	.+114    	; 0x11ee <main+0x37c>
    117c:	8c 2d       	mov	r24, r12
					
				} else { // NOTE OFF
					if(j < 8) {
    117e:	88 30       	cpi	r24, 0x08	; 8
    1180:	d8 f4       	brcc	.+54     	; 0x11b8 <main+0x346>
						PORTJ &= ~(1 << j + 7 - ((j * 2))); // led
    1182:	20 91 05 01 	lds	r18, 0x0105
    1186:	c7 01       	movw	r24, r14
    1188:	06 2c       	mov	r0, r6
    118a:	02 c0       	rjmp	.+4      	; 0x1190 <main+0x31e>
    118c:	88 0f       	add	r24, r24
    118e:	99 1f       	adc	r25, r25
    1190:	0a 94       	dec	r0
    1192:	e2 f7       	brpl	.-8      	; 0x118c <main+0x31a>
    1194:	80 95       	com	r24
    1196:	82 23       	and	r24, r18
    1198:	80 93 05 01 	sts	0x0105, r24
						PORTH &= ~(1 << j); // mosfet
    119c:	20 91 02 01 	lds	r18, 0x0102
    11a0:	c7 01       	movw	r24, r14
    11a2:	0c 2c       	mov	r0, r12
    11a4:	02 c0       	rjmp	.+4      	; 0x11aa <main+0x338>
    11a6:	88 0f       	add	r24, r24
    11a8:	99 1f       	adc	r25, r25
    11aa:	0a 94       	dec	r0
    11ac:	e2 f7       	brpl	.-8      	; 0x11a6 <main+0x334>
    11ae:	80 95       	com	r24
    11b0:	82 23       	and	r24, r18
    11b2:	80 93 02 01 	sts	0x0102, r24
    11b6:	18 c0       	rjmp	.+48     	; 0x11e8 <main+0x376>
					} else {
						if(j == 8) {
    11b8:	88 30       	cpi	r24, 0x08	; 8
    11ba:	11 f4       	brne	.+4      	; 0x11c0 <main+0x34e>
							PORTC &= ~(1 << 7);
    11bc:	47 98       	cbi	0x08, 7	; 8
    11be:	09 c0       	rjmp	.+18     	; 0x11d2 <main+0x360>
						} else if(j == 9) {
    11c0:	89 30       	cpi	r24, 0x09	; 9
    11c2:	11 f4       	brne	.+4      	; 0x11c8 <main+0x356>
							PORTC &= ~(1 << 6);
    11c4:	46 98       	cbi	0x08, 6	; 8
    11c6:	05 c0       	rjmp	.+10     	; 0x11d2 <main+0x360>
						} else if(j == 10) {
    11c8:	8a 30       	cpi	r24, 0x0A	; 10
    11ca:	11 f4       	brne	.+4      	; 0x11d0 <main+0x35e>
							PORTC &= ~(1 << 5);
    11cc:	45 98       	cbi	0x08, 5	; 8
    11ce:	01 c0       	rjmp	.+2      	; 0x11d2 <main+0x360>
						} else if(j == 11) {
							PORTC &= ~(1 << 4);
    11d0:	44 98       	cbi	0x08, 4	; 8
						}
						PORTE &= ~(1 << (j - 4));
    11d2:	2e b1       	in	r18, 0x0e	; 14
    11d4:	c7 01       	movw	r24, r14
    11d6:	0a 2c       	mov	r0, r10
    11d8:	02 c0       	rjmp	.+4      	; 0x11de <main+0x36c>
    11da:	88 0f       	add	r24, r24
    11dc:	99 1f       	adc	r25, r25
    11de:	0a 94       	dec	r0
    11e0:	e2 f7       	brpl	.-8      	; 0x11da <main+0x368>
    11e2:	80 95       	com	r24
    11e4:	82 23       	and	r24, r18
    11e6:	8e b9       	out	0x0e, r24	; 14
					}
					midiMsg[0] = 0x08; 
    11e8:	39 82       	std	Y+1, r3	; 0x01
					midiMsg[1] = 0x80;
    11ea:	2a 82       	std	Y+2, r2	; 0x02
					midiMsg[3] = 0x00;
    11ec:	1c 82       	std	Y+4, r1	; 0x04
				}
				midiMsg[2] = j + 59 - (j * 2);
    11ee:	86 2d       	mov	r24, r6
    11f0:	8c 5c       	subi	r24, 0xCC	; 204
    11f2:	8b 83       	std	Y+3, r24	; 0x03

				sendEmptyFrame = 0;
    11f4:	10 92 98 02 	sts	0x0298, r1
				if(!standalone) {
    11f8:	80 91 97 02 	lds	r24, 0x0297
    11fc:	88 23       	and	r24, r24
    11fe:	19 f0       	breq	.+6      	; 0x1206 <main+0x394>
    1200:	0a c0       	rjmp	.+20     	; 0x1216 <main+0x3a4>
					while (!usbInterruptIsReady()) {
						usbPoll();
    1202:	0e 94 0f 01 	call	0x21e	; 0x21e <usbPoll>
				}
				midiMsg[2] = j + 59 - (j * 2);

				sendEmptyFrame = 0;
				if(!standalone) {
					while (!usbInterruptIsReady()) {
    1206:	80 91 a4 02 	lds	r24, 0x02A4
    120a:	84 ff       	sbrs	r24, 4
    120c:	fa cf       	rjmp	.-12     	; 0x1202 <main+0x390>
						usbPoll();
					}
					usbSetInterrupt(midiMsg, 4);
    120e:	c2 01       	movw	r24, r4
    1210:	64 e0       	ldi	r22, 0x04	; 4
    1212:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <usbSetInterrupt>
    1216:	08 94       	sec
    1218:	c1 1c       	adc	r12, r1
    121a:	d1 1c       	adc	r13, r1
    121c:	08 94       	sec
    121e:	61 08       	sbc	r6, r1
    1220:	71 08       	sbc	r7, r1
    1222:	08 94       	sec
    1224:	a1 1c       	adc	r10, r1
    1226:	b1 1c       	adc	r11, r1
			i = 0;
		}

		
		// CAPACITIVE TOUCH -> PC via MIDI NOTE
		for(j = 0; j < 12; j++) {
    1228:	2c e0       	ldi	r18, 0x0C	; 12
    122a:	c2 16       	cp	r12, r18
    122c:	d1 04       	cpc	r13, r1
    122e:	09 f0       	breq	.+2      	; 0x1232 <main+0x3c0>
    1230:	59 cf       	rjmp	.-334    	; 0x10e4 <main+0x272>
				}
			}
		}
		
		// VHS -> PC via MIDI CC
		if(sendCC) {
    1232:	80 91 7e 02 	lds	r24, 0x027E
    1236:	88 23       	and	r24, r24
    1238:	09 f4       	brne	.+2      	; 0x123c <main+0x3ca>
    123a:	56 ce       	rjmp	.-852    	; 0xee8 <main+0x76>
			sendCC = 0;
    123c:	10 92 7e 02 	sts	0x027E, r1
			midiMsg[0] = 0x0b;
    1240:	8b e0       	ldi	r24, 0x0B	; 11
    1242:	89 83       	std	Y+1, r24	; 0x01
			midiMsg[1] = 0xb0;
    1244:	80 eb       	ldi	r24, 0xB0	; 176
    1246:	8a 83       	std	Y+2, r24	; 0x02
			midiMsg[2] = 70;
    1248:	86 e4       	ldi	r24, 0x46	; 70
    124a:	8b 83       	std	Y+3, r24	; 0x03
			midiMsg[3] = adc_read(ADC_PRESCALER_128, ADC_VREF_AVCC, 12) >> 3; // vhs slider
    124c:	87 e0       	ldi	r24, 0x07	; 7
    124e:	60 e4       	ldi	r22, 0x40	; 64
    1250:	4c e0       	ldi	r20, 0x0C	; 12
    1252:	0e 94 3b 04 	call	0x876	; 0x876 <adc_read>
    1256:	73 e0       	ldi	r23, 0x03	; 3
    1258:	96 95       	lsr	r25
    125a:	87 95       	ror	r24
    125c:	7a 95       	dec	r23
    125e:	e1 f7       	brne	.-8      	; 0x1258 <main+0x3e6>
    1260:	8c 83       	std	Y+4, r24	; 0x04
			
			sendEmptyFrame = 0;
    1262:	10 92 98 02 	sts	0x0298, r1
			if(!standalone) {
    1266:	80 91 97 02 	lds	r24, 0x0297
    126a:	88 23       	and	r24, r24
    126c:	19 f0       	breq	.+6      	; 0x1274 <main+0x402>
    126e:	0a c0       	rjmp	.+20     	; 0x1284 <main+0x412>
				while (!usbInterruptIsReady()) {
					usbPoll();
    1270:	0e 94 0f 01 	call	0x21e	; 0x21e <usbPoll>
			midiMsg[2] = 70;
			midiMsg[3] = adc_read(ADC_PRESCALER_128, ADC_VREF_AVCC, 12) >> 3; // vhs slider
			
			sendEmptyFrame = 0;
			if(!standalone) {
				while (!usbInterruptIsReady()) {
    1274:	80 91 a4 02 	lds	r24, 0x02A4
    1278:	84 ff       	sbrs	r24, 4
    127a:	fa cf       	rjmp	.-12     	; 0x1270 <main+0x3fe>
					usbPoll();
				}
				usbSetInterrupt(midiMsg, 4);
    127c:	c2 01       	movw	r24, r4
    127e:	64 e0       	ldi	r22, 0x04	; 4
    1280:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <usbSetInterrupt>
			}
			

			if(midiMsg[3] > 0 && midiMsg[3] < 10) {
    1284:	8c 81       	ldd	r24, Y+4	; 0x04
    1286:	98 2f       	mov	r25, r24
    1288:	91 50       	subi	r25, 0x01	; 1
    128a:	99 30       	cpi	r25, 0x09	; 9
    128c:	38 f4       	brcc	.+14     	; 0x129c <main+0x42a>
				AllOff();
    128e:	0e 94 2c 07 	call	0xe58	; 0xe58 <AllOff>
				PORTC |= (1 << PINC4);
    1292:	44 9a       	sbi	0x08, 4	; 8
				PORTE |= (1 << PINE7);
    1294:	77 9a       	sbi	0x0e, 7	; 14
				PORTC |= (1 << PINC6);
    1296:	46 9a       	sbi	0x08, 6	; 8
				PORTE |= (1 << PINE5);
    1298:	75 9a       	sbi	0x0e, 5	; 14
    129a:	11 c0       	rjmp	.+34     	; 0x12be <main+0x44c>
				PORTJ |= (1 << PINJ0);
				PORTH |= (1 << PINH7);
				
			} else if(midiMsg[3] > 10 && midiMsg[3] < 20) {
    129c:	98 2f       	mov	r25, r24
    129e:	9b 50       	subi	r25, 0x0B	; 11
    12a0:	99 30       	cpi	r25, 0x09	; 9
    12a2:	38 f4       	brcc	.+14     	; 0x12b2 <main+0x440>
				AllOff();
    12a4:	0e 94 2c 07 	call	0xe58	; 0xe58 <AllOff>
				PORTC |= (1 << PINC5);
    12a8:	45 9a       	sbi	0x08, 5	; 8
				PORTE |= (1 << PINE6);
    12aa:	76 9a       	sbi	0x0e, 6	; 14
				PORTC |= (1 << PINC7);
    12ac:	47 9a       	sbi	0x08, 7	; 8
				PORTE |= (1 << PINE4);
    12ae:	74 9a       	sbi	0x0e, 4	; 14
    12b0:	1b ce       	rjmp	.-970    	; 0xee8 <main+0x76>
				
			} else if(midiMsg[3] > 20 && midiMsg[3] < 30) {
    12b2:	98 2f       	mov	r25, r24
    12b4:	95 51       	subi	r25, 0x15	; 21
    12b6:	99 30       	cpi	r25, 0x09	; 9
    12b8:	58 f4       	brcc	.+22     	; 0x12d0 <main+0x45e>
				AllOff();
    12ba:	0e 94 2c 07 	call	0xe58	; 0xe58 <AllOff>
				PORTJ |= (1 << PINJ0);
    12be:	80 91 05 01 	lds	r24, 0x0105
    12c2:	81 60       	ori	r24, 0x01	; 1
    12c4:	80 93 05 01 	sts	0x0105, r24
				PORTH |= (1 << PINH7);
    12c8:	80 91 02 01 	lds	r24, 0x0102
    12cc:	80 68       	ori	r24, 0x80	; 128
    12ce:	68 c0       	rjmp	.+208    	; 0x13a0 <main+0x52e>
				
			} else if(midiMsg[3] > 30 && midiMsg[3] < 40) {
    12d0:	98 2f       	mov	r25, r24
    12d2:	9f 51       	subi	r25, 0x1F	; 31
    12d4:	99 30       	cpi	r25, 0x09	; 9
    12d6:	58 f4       	brcc	.+22     	; 0x12ee <main+0x47c>
				AllOff();
    12d8:	0e 94 2c 07 	call	0xe58	; 0xe58 <AllOff>
				PORTJ |= (1 << PINJ1);
    12dc:	80 91 05 01 	lds	r24, 0x0105
    12e0:	82 60       	ori	r24, 0x02	; 2
    12e2:	80 93 05 01 	sts	0x0105, r24
				PORTH |= (1 << PINH6);
    12e6:	80 91 02 01 	lds	r24, 0x0102
    12ea:	80 64       	ori	r24, 0x40	; 64
    12ec:	59 c0       	rjmp	.+178    	; 0x13a0 <main+0x52e>
				
			} else if(midiMsg[3] > 40 && midiMsg[3] < 50) {
    12ee:	98 2f       	mov	r25, r24
    12f0:	99 52       	subi	r25, 0x29	; 41
    12f2:	99 30       	cpi	r25, 0x09	; 9
    12f4:	58 f4       	brcc	.+22     	; 0x130c <main+0x49a>
				AllOff();
    12f6:	0e 94 2c 07 	call	0xe58	; 0xe58 <AllOff>
				PORTJ |= (1 << PINJ2);
    12fa:	80 91 05 01 	lds	r24, 0x0105
    12fe:	84 60       	ori	r24, 0x04	; 4
    1300:	80 93 05 01 	sts	0x0105, r24
				PORTH |= (1 << PINH5);
    1304:	80 91 02 01 	lds	r24, 0x0102
    1308:	80 62       	ori	r24, 0x20	; 32
    130a:	4a c0       	rjmp	.+148    	; 0x13a0 <main+0x52e>
				
			} else if(midiMsg[3] > 50 && midiMsg[3] < 60) {
    130c:	98 2f       	mov	r25, r24
    130e:	93 53       	subi	r25, 0x33	; 51
    1310:	99 30       	cpi	r25, 0x09	; 9
    1312:	58 f4       	brcc	.+22     	; 0x132a <main+0x4b8>
				AllOff();
    1314:	0e 94 2c 07 	call	0xe58	; 0xe58 <AllOff>
				PORTJ |= (1 << PINJ3);
    1318:	80 91 05 01 	lds	r24, 0x0105
    131c:	88 60       	ori	r24, 0x08	; 8
    131e:	80 93 05 01 	sts	0x0105, r24
				PORTH |= (1 << PINH4);
    1322:	80 91 02 01 	lds	r24, 0x0102
    1326:	80 61       	ori	r24, 0x10	; 16
    1328:	3b c0       	rjmp	.+118    	; 0x13a0 <main+0x52e>
				
			} else if(midiMsg[3] > 60 && midiMsg[3] < 70) {
    132a:	98 2f       	mov	r25, r24
    132c:	9d 53       	subi	r25, 0x3D	; 61
    132e:	99 30       	cpi	r25, 0x09	; 9
    1330:	58 f4       	brcc	.+22     	; 0x1348 <main+0x4d6>
				AllOff();
    1332:	0e 94 2c 07 	call	0xe58	; 0xe58 <AllOff>
				PORTJ |= (1 << PINJ4);
    1336:	80 91 05 01 	lds	r24, 0x0105
    133a:	80 61       	ori	r24, 0x10	; 16
    133c:	80 93 05 01 	sts	0x0105, r24
				PORTH |= (1 << PINH3);
    1340:	80 91 02 01 	lds	r24, 0x0102
    1344:	88 60       	ori	r24, 0x08	; 8
    1346:	2c c0       	rjmp	.+88     	; 0x13a0 <main+0x52e>
				
			} else if(midiMsg[3] > 70 && midiMsg[3] < 80) {
    1348:	98 2f       	mov	r25, r24
    134a:	97 54       	subi	r25, 0x47	; 71
    134c:	99 30       	cpi	r25, 0x09	; 9
    134e:	58 f4       	brcc	.+22     	; 0x1366 <main+0x4f4>
				AllOff();
    1350:	0e 94 2c 07 	call	0xe58	; 0xe58 <AllOff>
				PORTJ |= (1 << PINJ5);
    1354:	80 91 05 01 	lds	r24, 0x0105
    1358:	80 62       	ori	r24, 0x20	; 32
    135a:	80 93 05 01 	sts	0x0105, r24
				PORTH |= (1 << PINH2);
    135e:	80 91 02 01 	lds	r24, 0x0102
    1362:	84 60       	ori	r24, 0x04	; 4
    1364:	1d c0       	rjmp	.+58     	; 0x13a0 <main+0x52e>
				
			} else if(midiMsg[3] > 80 && midiMsg[3] < 90) {
    1366:	98 2f       	mov	r25, r24
    1368:	91 55       	subi	r25, 0x51	; 81
    136a:	99 30       	cpi	r25, 0x09	; 9
    136c:	58 f4       	brcc	.+22     	; 0x1384 <main+0x512>
				AllOff();
    136e:	0e 94 2c 07 	call	0xe58	; 0xe58 <AllOff>
				PORTJ |= (1 << PINJ6);
    1372:	80 91 05 01 	lds	r24, 0x0105
    1376:	80 64       	ori	r24, 0x40	; 64
    1378:	80 93 05 01 	sts	0x0105, r24
				PORTH |= (1 << PINH1);
    137c:	80 91 02 01 	lds	r24, 0x0102
    1380:	82 60       	ori	r24, 0x02	; 2
    1382:	0e c0       	rjmp	.+28     	; 0x13a0 <main+0x52e>
				
			} else if(midiMsg[3] > 90 && midiMsg[3] < 100) {
    1384:	98 2f       	mov	r25, r24
    1386:	9b 55       	subi	r25, 0x5B	; 91
    1388:	99 30       	cpi	r25, 0x09	; 9
    138a:	68 f4       	brcc	.+26     	; 0x13a6 <main+0x534>
				AllOff();
    138c:	0e 94 2c 07 	call	0xe58	; 0xe58 <AllOff>
				PORTJ |= (1 << PINJ7);
    1390:	80 91 05 01 	lds	r24, 0x0105
    1394:	80 68       	ori	r24, 0x80	; 128
    1396:	80 93 05 01 	sts	0x0105, r24
				PORTH |= (1 << PINH0);
    139a:	80 91 02 01 	lds	r24, 0x0102
    139e:	81 60       	ori	r24, 0x01	; 1
    13a0:	80 93 02 01 	sts	0x0102, r24
    13a4:	a1 cd       	rjmp	.-1214   	; 0xee8 <main+0x76>
				
			} else if(midiMsg[3] > 100 && midiMsg[3] < 116) {
    13a6:	85 56       	subi	r24, 0x65	; 101
    13a8:	8f 30       	cpi	r24, 0x0F	; 15
    13aa:	08 f0       	brcs	.+2      	; 0x13ae <main+0x53c>
    13ac:	9d cd       	rjmp	.-1222   	; 0xee8 <main+0x76>
				AllOff();
    13ae:	0e 94 2c 07 	call	0xe58	; 0xe58 <AllOff>
    13b2:	9a cd       	rjmp	.-1228   	; 0xee8 <main+0x76>

000013b4 <__udivmodhi4>:
    13b4:	aa 1b       	sub	r26, r26
    13b6:	bb 1b       	sub	r27, r27
    13b8:	51 e1       	ldi	r21, 0x11	; 17
    13ba:	07 c0       	rjmp	.+14     	; 0x13ca <__udivmodhi4_ep>

000013bc <__udivmodhi4_loop>:
    13bc:	aa 1f       	adc	r26, r26
    13be:	bb 1f       	adc	r27, r27
    13c0:	a6 17       	cp	r26, r22
    13c2:	b7 07       	cpc	r27, r23
    13c4:	10 f0       	brcs	.+4      	; 0x13ca <__udivmodhi4_ep>
    13c6:	a6 1b       	sub	r26, r22
    13c8:	b7 0b       	sbc	r27, r23

000013ca <__udivmodhi4_ep>:
    13ca:	88 1f       	adc	r24, r24
    13cc:	99 1f       	adc	r25, r25
    13ce:	5a 95       	dec	r21
    13d0:	a9 f7       	brne	.-22     	; 0x13bc <__udivmodhi4_loop>
    13d2:	80 95       	com	r24
    13d4:	90 95       	com	r25
    13d6:	bc 01       	movw	r22, r24
    13d8:	cd 01       	movw	r24, r26
    13da:	08 95       	ret

000013dc <_exit>:
    13dc:	f8 94       	cli

000013de <__stop_program>:
    13de:	ff cf       	rjmp	.-2      	; 0x13de <__stop_program>
