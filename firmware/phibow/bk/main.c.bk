#define F_CPU 16000000UL

#include <avr/io.h>
#include <avr/interrupt.h>
#include <avr/pgmspace.h>
#include <avr/wdt.h>

#include <util/delay.h>
#include <string.h>

#include "usbdrv.h"
#include "description.h"
#include "touch.h"

static uchar sendEmptyFrame;


////////////////////////////////////////////////////////////////////////
// TODO
////////////////////////////////////////////////////////////////////////
// to do alternative tuning 432hz...
// adding a switch to use 440 or 432
// piezo for helping tuning the strings
// with a button to circle strings
	

////////////////////////////////////////////////////////////////////////
// INIT
////////////////////////////////////////////////////////////////////////
static void USBConf(void)
{
	uchar i, j;

	/* activate pull-ups except on USB lines */
	USB_CFG_IOPORT =
	    (uchar) ~ ((1 << USB_CFG_DMINUS_BIT) |
		       (1 << USB_CFG_DPLUS_BIT));
	/* all pins input except USB (-> USB reset) */
#ifdef USB_CFG_PULLUP_IOPORT	/* use usbDeviceConnect()/usbDeviceDisconnect() if available */
	USBDDR = 0;		/* we do RESET by deactivating pullup */
	usbDeviceDisconnect();
#else
	USBDDR = (1 << USB_CFG_DMINUS_BIT) | (1 << USB_CFG_DPLUS_BIT);
#endif

	j = 0;
	while (--j) {		/* USB Reset by device only required on Watchdog Reset */
		i = 0;
		while (--i);	/* delay >10ms for USB reset */
	}
#ifdef USB_CFG_PULLUP_IOPORT
	usbDeviceConnect();
#else
	USBDDR = 0;		/*  remove USB reset condition */
#endif
}

void IOConf()
{
	// PWM - output
	DDRB = 0xFF;
	DDRG = 0xFF;
	DDRH = 0xFF;
	DDRE = 0xFF;
	DDRL = 0xFF;
	
	// Push-button - input
	DDRJ = 0x00;
	PORTJ = 0xFF; // pull-up enable
	
	// LED - output
	DDRA = 0xFF;
	
	// Push-button - input (4-7)
	// LED - output (0-3)	
	DDRC = 0x0F;
	PORTC = 0xF0; // pull-up enable
}

void PWMConf()
{
	// frequency = clock / (prescaler * (1+top))
	// top = (clock / (prescaler * frequency))-1
	
	//Timer 0 | 8bit | prescaler 1024
	TCCR0A |= (1<<WGM01) | (1<<WGM00) | (1<<COM0A1) | (1<<COM0B1);
	TCCR0B |= (1<<CS02) | (1<<CS00);
	OCR0A = 66; // a# 233.082 -- 38
	OCR0B = 70; // a 220 -- 37
	//OCR0A = 41; // a# 369.994 -- 46
	//OCR0B = 39; // g 391.995 -- 47
	
	//Timer 1 | 16bit | prescaler 8
	TCCR1A |= (1<<WGM11) | (1<<COM1A1) | (1<<COM1B1);
	TCCR1B |= (1<<WGM13) | (1<<WGM12)  | (1<<CS11);
	ICR1 = 65535;
	OCR1A = 15288; // c - 130.813 -- 28
	OCR1B = 13620; //d - 146.832 -- 30
	//OCR1A = 7644; // c - 261.626 -- 40
	//OCR1B = 7214; //c# - 277.183 -- 41
	
	//Timer 2 | 8bit | prescaler 1024
	TCCR2A |= (1<<WGM21) | (1<<WGM20) | (1<<COM2A1) | (1<<COM2B1);
	TCCR2B |= (1<<CS22) | (1<<CS21) | (1<<CS20);
	OCR2A = 94; // e - 164.814 -- 32
	OCR2B = 112; //c# - 138.591 -- 29
	//OCR2A = 49; // d# - 311.127 -- 43
	//OCR2B = 52; //d - 293.665 -- 42
	
	//Timer 3 | 16bit | prescaler 8
	TCCR3A |= (1<<WGM31) | (1<<COM3A1) | (1<<COM3B1);
	TCCR3B |= (1<<WGM33) | (1<<WGM32)  | (1<<CS31);
	ICR3 = 65535;
	OCR3A = 12856; // d# - 155.563 -- 31
	OCR3B = 11453; //f - 174.614 -- 33
	//OCR3A = 6066; // e - 329.628 -- 44
	//OCR3B = 5726; //f - 349.228 -- 45
	
	//Timer 4 | 16bit | prescaler 8
	TCCR4A |= (1<<WGM41) | (1<<COM4A1) | (1<<COM4B1);
	TCCR4B |= (1<<WGM43) | (1<<WGM42)  | (1<<CS41);
	ICR4 = 65535;
	OCR4A = 10810; // f# - 184.997 -- 34
	OCR4B = 10203; //g - 195.998 -- 35
	//OCR4A = 4815; // g# - 415.305 -- 48
	//OCR4B = 4544; //a - 440 -- 49

	//Timer 5 | 16bit | prescaler 8
	TCCR5A |= (1<<WGM51) | (1<<COM5A1) | (1<<COM5B1);
	TCCR5B |= (1<<WGM53) | (1<<WGM52)  | (1<<CS51);
	ICR5 = 65535;
	OCR5A = 9630; // g# - 207.652 -- 36
	OCR5B = 8098; //b - 246.942	-- 39
	//OCR5A = 4289; // a# - 466.164 -- 50
	//OCR5B = 4049; //b - 493.883	-- 51
}

/////////////////////////////////////////////////////////////////////////////////////////////////
// CAPACITIVE TOUCH on ADC
/////////////////////////////////////////////////////////////////////////////////////////////////
/*
static touch_channel_t btn11 = { .mux = 3, .port = &PORTK, .portmask = (1<<PK3), .min = 700, .max = 1024 };
static touch_channel_t btn10 = { .mux = 2, .port = &PORTK, .portmask = (1<<PK2), .min = 700, .max = 1024 };
static touch_channel_t btn9 = { .mux = 1, .port = &PORTK, .portmask = (1<<PK1), .min = 700, .max = 1024 };
static touch_channel_t btn8 = { .mux = 0, .port = &PORTK, .portmask = (1<<PK0), .min = 700, .max = 1024 };
static touch_channel_t btn7 = { .mux = 7, .port = &PORTF, .portmask = (1<<PF7), .min = 700, .max = 1024 };
static touch_channel_t btn6 = { .mux = 6, .port = &PORTF, .portmask = (1<<PF6), .min = 700, .max = 1024 };
static touch_channel_t btn5 = { .mux = 5, .port = &PORTF, .portmask = (1<<PF5), .min = 700, .max = 1024 };
static touch_channel_t btn4 = { .mux = 4, .port = &PORTF, .portmask = (1<<PF4), .min = 700, .max = 1024 };
static touch_channel_t btn3 = { .mux = 3, .port = &PORTF, .portmask = (1<<PF3), .min = 700, .max = 1024 };
static touch_channel_t btn2 = { .mux = 2, .port = &PORTF, .portmask = (1<<PF2), .min = 700, .max = 1024 };
static touch_channel_t btn1 = { .mux = 1, .port = &PORTF, .portmask = (1<<PF1), .min = 700, .max = 1024 };
*/
static touch_channel_t btn0 = { .mux = 0, .port = &PORTF, .portmask = (1<<PF0), .min = 700, .max = 1024 };




/////////////////////////////////////////////////////////////////////////////////////////////////
// UTIL
/////////////////////////////////////////////////////////////////////////////////////////////////

// octave -1 (48-59)
void parseMidiMessage(uchar *data, uchar len) {
	uchar cin = (*data) & 0x0f;
	uchar Rch = (*(data+1)) & 0x0f;
	uchar note = *(data+2);
	// velocity *(data + 3)
	// PBBuf = (*(data + 3)) & 0x7f; /* use only MSB(7bit) */
	
	if (Rch != 0)
		return;

	switch(cin) {
		case 8:	/* NOTE OFF */
				PORTC |= (1 << PINC1);
		break;
		case 9:	/* NOTE ON */
			if( *(data + 3) == 0){
				PORTC |= (1 << PINC1);
			} else {
				if(note == 48) {
					PORTC &= ~(1 << PINC1);
				} else if(note == 49) {
					PORTC &= ~(1 << PINC1);
				} else if(note == 50) {
					PORTC &= ~(1 << PINC1);
				} else if(note == 51) {
					PORTC &= ~(1 << PINC1);
				} else if(note == 52) {
					PORTC &= ~(1 << PINC1);
				} else if(note == 53) {
					PORTC &= ~(1 << PINC1);
				} else if(note == 54) {
					PORTC &= ~(1 << PINC1);
				} else if(note == 55) {
					PORTC &= ~(1 << PINC1);
				} else if(note == 56) {
					PORTC &= ~(1 << PINC1);
				} else if(note == 57) {
					PORTC &= ~(1 << PINC1);
				} else if(note == 58) {
					PORTC &= ~(1 << PINC1);
				} else if(note == 59) {
					PORTC &= ~(1 << PINC1);
				}
			}
		break;
	}

	if (len > 4) {
		parseMidiMessage(data+4, len-4);
	}
}



/////////////////////////////////////////////////////////////////////////////////////////////////
// USB<->MIDI
/////////////////////////////////////////////////////////////////////////////////////////////////
uchar usbFunctionDescriptor(usbRequest_t * rq)
{
	if (rq->wValue.bytes[1] == USBDESCR_DEVICE) {
		usbMsgPtr = (uchar *) deviceDescrMIDI;
		return sizeof(deviceDescrMIDI);
	} else {
		usbMsgPtr = (uchar *) configDescrMIDI;
		return sizeof(configDescrMIDI);
	}
}

uchar usbFunctionSetup(uchar data[8])
{
	usbRequest_t *rq = (void *) data;
	if ((rq->bmRequestType & USBRQ_TYPE_MASK) == USBRQ_TYPE_CLASS) {
		if ((rq->bmRequestType & USBRQ_DIR_MASK) ==
		    USBRQ_DIR_HOST_TO_DEVICE)
			sendEmptyFrame = 1;
	}
	return 0xff;
}

void usbFunctionWriteOut(uchar * data, uchar len) // from computer
{
	parseMidiMessage(data, len);
}

uchar usbFunctionWrite(uchar * data, uchar len)
{
	return 1;
}

uchar usbFunctionRead(uchar * data, uchar len)
{
	return 7;
}



////////////////////////////////////////////////////////////////////////
// MAIN
////////////////////////////////////////////////////////////////////////
int main(void)
{
	IOConf();
	PWMConf();
	USBConf();
	usbInit();
	touch_init();
	sei();
	
	uchar midiMsg[8];
	uchar iii;
    uint16_t i = 0;
    uint16_t sample[12];

	sendEmptyFrame = 0;
	
	for (;;) {		/* main event loop */
		usbPoll();
		iii = 0;
		i++;
		
		// capacitive touch reading
        if (i>10000){
			
            sample[0] = touch_measure(&btn0);
            /*sample[1] = touch_measure(&btn1);
            sample[2] = touch_measure(&btn2);
            sample[3] = touch_measure(&btn3);
            sample[4] = touch_measure(&btn4);
            sample[5] = touch_measure(&btn5);
            sample[6] = touch_measure(&btn6);
            sample[7] = touch_measure(&btn7);
            sample[8] = touch_measure(&btn8);
            sample[9] = touch_measure(&btn9);
            sample[10] = touch_measure(&btn10);
            sample[11] = touch_measure(&btn11);
       */
            if(sample[0] > 790) {
				PORTA &= ~(1 << PINA0);
			} else {
				PORTA |= (1 << PINA0);
			}
    
            i=0;
            
        }
        
        // sending to midi to pc
		if (usbInterruptIsReady()) {
			//if(!(PINJ & (1<<PINJ0))) {
				midiMsg[iii++] = 0x08;
				midiMsg[iii++] = 0x80;
				midiMsg[iii++] = 55;
				midiMsg[iii++] = 0x00;
				midiMsg[iii++] = 0x09;
				midiMsg[iii++] = 0x90;
				midiMsg[iii++] = 77;
				midiMsg[iii++] = 0x7f;
				if (8 == iii) {
					sendEmptyFrame = 1;
				} else {
					sendEmptyFrame = 0;
				}
				usbSetInterrupt(midiMsg, iii);
			//}
		}
	}
	return 0;
}
