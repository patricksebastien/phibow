
12pwmsoftware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000000e8  0000017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000e8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  0000017c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000017c  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000000b4  00000000  00000000  000001d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000083  00000000  00000000  00000288  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000000ca  00000000  00000000  0000030b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  000003d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000140  00000000  00000000  0000042c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000063  00000000  00000000  0000056c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000005cf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
   4:	27 c0       	rjmp	.+78     	; 0x54 <__bad_interrupt>
   6:	26 c0       	rjmp	.+76     	; 0x54 <__bad_interrupt>
   8:	25 c0       	rjmp	.+74     	; 0x54 <__bad_interrupt>
   a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	1f c0       	rjmp	.+62     	; 0x54 <__bad_interrupt>
  16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	1c c0       	rjmp	.+56     	; 0x56 <__vector_14>
  1e:	1a c0       	rjmp	.+52     	; 0x54 <__bad_interrupt>
  20:	19 c0       	rjmp	.+50     	; 0x54 <__bad_interrupt>
  22:	18 c0       	rjmp	.+48     	; 0x54 <__bad_interrupt>
  24:	17 c0       	rjmp	.+46     	; 0x54 <__bad_interrupt>
  26:	16 c0       	rjmp	.+44     	; 0x54 <__bad_interrupt>
  28:	15 c0       	rjmp	.+42     	; 0x54 <__bad_interrupt>
  2a:	14 c0       	rjmp	.+40     	; 0x54 <__bad_interrupt>
  2c:	13 c0       	rjmp	.+38     	; 0x54 <__bad_interrupt>
  2e:	12 c0       	rjmp	.+36     	; 0x54 <__bad_interrupt>
  30:	11 c0       	rjmp	.+34     	; 0x54 <__bad_interrupt>
  32:	10 c0       	rjmp	.+32     	; 0x54 <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d2 e0       	ldi	r29, 0x02	; 2
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_clear_bss>:
  40:	21 e0       	ldi	r18, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	a4 30       	cpi	r26, 0x04	; 4
  4c:	b2 07       	cpc	r27, r18
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	27 d0       	rcall	.+78     	; 0xa0 <main>
  52:	48 c0       	rjmp	.+144    	; 0xe4 <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <__vector_14>:
#include <avr/io.h>
#include <avr/interrupt.h>

volatile unsigned long test = 0;

ISR (TIMER0_COMPA_vect) {
  56:	1f 92       	push	r1
  58:	0f 92       	push	r0
  5a:	0f b6       	in	r0, 0x3f	; 63
  5c:	0f 92       	push	r0
  5e:	11 24       	eor	r1, r1
  60:	8f 93       	push	r24
  62:	9f 93       	push	r25
  64:	af 93       	push	r26
  66:	bf 93       	push	r27
	test++;
  68:	80 91 00 01 	lds	r24, 0x0100
  6c:	90 91 01 01 	lds	r25, 0x0101
  70:	a0 91 02 01 	lds	r26, 0x0102
  74:	b0 91 03 01 	lds	r27, 0x0103
  78:	01 96       	adiw	r24, 0x01	; 1
  7a:	a1 1d       	adc	r26, r1
  7c:	b1 1d       	adc	r27, r1
  7e:	80 93 00 01 	sts	0x0100, r24
  82:	90 93 01 01 	sts	0x0101, r25
  86:	a0 93 02 01 	sts	0x0102, r26
  8a:	b0 93 03 01 	sts	0x0103, r27
}
  8e:	bf 91       	pop	r27
  90:	af 91       	pop	r26
  92:	9f 91       	pop	r25
  94:	8f 91       	pop	r24
  96:	0f 90       	pop	r0
  98:	0f be       	out	0x3f, r0	; 63
  9a:	0f 90       	pop	r0
  9c:	1f 90       	pop	r1
  9e:	18 95       	reti

000000a0 <main>:

int main(void)
{
	TCCR0A |= (1 << COM1A1);
  a0:	84 b5       	in	r24, 0x24	; 36
  a2:	80 68       	ori	r24, 0x80	; 128
  a4:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1 << CS10) | (1 << WGM12) | (1 << WGM13);
  a6:	85 b5       	in	r24, 0x25	; 37
  a8:	89 61       	ori	r24, 0x19	; 25
  aa:	85 bd       	out	0x25, r24	; 37
	TIMSK0 |= (1 << OCIE0A);
  ac:	ee e6       	ldi	r30, 0x6E	; 110
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	80 81       	ld	r24, Z
  b2:	82 60       	ori	r24, 0x02	; 2
  b4:	80 83       	st	Z, r24
	sei();
  b6:	78 94       	sei
	
    while(1)
    {
		if(test > 100000) {
  b8:	80 91 00 01 	lds	r24, 0x0100
  bc:	90 91 01 01 	lds	r25, 0x0101
  c0:	a0 91 02 01 	lds	r26, 0x0102
  c4:	b0 91 03 01 	lds	r27, 0x0103
  c8:	81 3a       	cpi	r24, 0xA1	; 161
  ca:	96 48       	sbci	r25, 0x86	; 134
  cc:	a1 40       	sbci	r26, 0x01	; 1
  ce:	b1 05       	cpc	r27, r1
  d0:	98 f3       	brcs	.-26     	; 0xb8 <main+0x18>
			test = 0;
  d2:	10 92 00 01 	sts	0x0100, r1
  d6:	10 92 01 01 	sts	0x0101, r1
  da:	10 92 02 01 	sts	0x0102, r1
  de:	10 92 03 01 	sts	0x0103, r1
  e2:	ea cf       	rjmp	.-44     	; 0xb8 <main+0x18>

000000e4 <_exit>:
  e4:	f8 94       	cli

000000e6 <__stop_program>:
  e6:	ff cf       	rjmp	.-2      	; 0xe6 <__stop_program>
